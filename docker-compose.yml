version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: stockanalyzer
      POSTGRES_USER: stockuser
      POSTGRES_PASSWORD: stockpass123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stockuser -d stockanalyzer"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Flask Application
  web:
    build: .
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      FLASK_ENV: production
      DATABASE_URL: postgresql://stockuser:stockpass123@db:5432/stockanalyzer
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here-change-in-production}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-jwt-secret-key-here}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      MAIL_SERVER: ${MAIL_SERVER:-smtp.gmail.com}
      MAIL_PORT: ${MAIL_PORT:-587}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./static:/app/static
      - ./templates:/app/templates
    command: >
      sh -c "
        flask db upgrade &&
        python app.py
      "

  # Background Worker (for scheduled jobs)
  worker:
    build: .
    restart: unless-stopped
    environment:
      FLASK_ENV: production
      DATABASE_URL: postgresql://stockuser:stockpass123@db:5432/stockanalyzer
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here-change-in-production}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    command: python -c "from app import create_app; from jobs.scheduler import setup_jobs; from apscheduler.schedulers.blocking import BlockingScheduler; app = create_app('production'); scheduler = BlockingScheduler(); setup_jobs(app, scheduler); scheduler.start()"

  # Nginx (optional, for production)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./static:/usr/share/nginx/html/static:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - web

volumes:
  postgres_data:
  redis_data:
  nginx_logs: