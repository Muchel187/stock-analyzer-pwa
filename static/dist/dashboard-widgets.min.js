(()=>{var t={243:t=>{class WebSocketManager{constructor(){this.socket=null,this.apiKey=null,this.subscriptions=new Set,this.onPriceUpdate=null,this.onConnectionChange=null,this.reconnectAttempts=0,this.maxReconnectAttempts=5,this.reconnectDelay=5e3,this.isConnecting=!1,this.isConnected=!1}async connect(){if(this.isConnecting)console.log("[WS] Connection already in progress...");else{if(this.socket&&this.socket.readyState===WebSocket.OPEN)return console.log("[WS] WebSocket is already connected."),void(this.isConnected=!0);this.isConnecting=!0,this._notifyConnectionChange("connecting");try{console.log("[WS] Fetching WebSocket API key from backend...");const t=await api.request("/config/ws-key");this.apiKey=t.apiKey,console.log("[WS] API key received, establishing WebSocket connection...");const e=`wss://ws.twelvedata.com/v1/quotes/price?apikey=${this.apiKey}`;this.socket=new WebSocket(e),this.socket.onopen=()=>{console.log("[WS] ‚úÖ WebSocket connection established successfully."),this.isConnected=!0,this.isConnecting=!1,this.reconnectAttempts=0,this._notifyConnectionChange("connected"),this.resubscribe()},this.socket.onmessage=t=>{try{const e=JSON.parse(t.data);console.log("[WS] Received message:",e),"price"===e.event&&this.onPriceUpdate?this.onPriceUpdate({symbol:e.symbol,price:parseFloat(e.price),timestamp:e.timestamp||Date.now()}):"subscribe-status"===e.event?console.log(`[WS] Subscription status: ${e.status} for ${e.symbol}`):"heartbeat"===e.event&&console.log("[WS] ‚ù§Ô∏è Heartbeat received")}catch(t){console.error("[WS] Error parsing WebSocket message:",t)}},this.socket.onclose=t=>{console.log(`[WS] WebSocket connection closed. Code: ${t.code}, Reason: ${t.reason}`),this.isConnected=!1,this.isConnecting=!1,this._notifyConnectionChange("disconnected"),1e3!==t.code&&this.reconnectAttempts<this.maxReconnectAttempts?(this.reconnectAttempts++,console.log(`[WS] Reconnection attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts} in ${this.reconnectDelay/1e3}s...`),setTimeout(()=>this.connect(),this.reconnectDelay)):this.reconnectAttempts>=this.maxReconnectAttempts&&(console.error("[WS] ‚ùå Max reconnection attempts reached. Please refresh the page."),this._notifyConnectionChange("failed"))},this.socket.onerror=t=>{console.error("[WS] WebSocket error:",t),this.isConnected=!1,this._notifyConnectionChange("error")}}catch(t){console.error("[WS] Could not establish WebSocket connection:",t),this.isConnecting=!1,this.isConnected=!1,this._notifyConnectionChange("error"),this.reconnectAttempts<this.maxReconnectAttempts&&(this.reconnectAttempts++,console.log(`[WS] Retrying connection in ${this.reconnectDelay/1e3}s...`),setTimeout(()=>this.connect(),this.reconnectDelay))}}}subscribe(t){if(!Array.isArray(t)||0===t.length)return void console.warn("[WS] No tickers provided for subscription");if(!this.socket||this.socket.readyState!==WebSocket.OPEN)return console.warn("[WS] Cannot subscribe, socket is not open. Saving for later..."),void t.forEach(t=>this.subscriptions.add(t.toUpperCase()));t.forEach(t=>this.subscriptions.add(t.toUpperCase()));const e={action:"subscribe",params:{symbols:t.join(",")}};this.socket.send(JSON.stringify(e)),console.log(`[WS] üìä Subscribed to: ${t.join(", ")}`)}unsubscribe(t){if(!Array.isArray(t)||0===t.length)return void console.warn("[WS] No tickers provided for unsubscription");if(!this.socket||this.socket.readyState!==WebSocket.OPEN)return console.warn("[WS] Cannot unsubscribe, socket is not open."),void t.forEach(t=>this.subscriptions.delete(t.toUpperCase()));t.forEach(t=>this.subscriptions.delete(t.toUpperCase()));const e={action:"unsubscribe",params:{symbols:t.join(",")}};this.socket.send(JSON.stringify(e)),console.log(`[WS] üö´ Unsubscribed from: ${t.join(", ")}`)}resubscribe(){this.subscriptions.size>0&&(console.log(`[WS] Resubscribing to ${this.subscriptions.size} tickers...`),this.subscribe(Array.from(this.subscriptions)))}disconnect(){this.socket&&(console.log("[WS] Manually disconnecting WebSocket..."),this.socket.close(1e3,"Manual disconnect"),this.socket=null,this.isConnected=!1,this.subscriptions.clear(),this._notifyConnectionChange("disconnected"))}getConnectionStatus(){return this.isConnected&&this.socket&&this.socket.readyState===WebSocket.OPEN?"connected":this.isConnecting||this.socket&&this.socket.readyState===WebSocket.CONNECTING?"connecting":"disconnected"}getSubscribedTickers(){return Array.from(this.subscriptions)}_notifyConnectionChange(t){this.onConnectionChange&&this.onConnectionChange(t)}}t.exports&&(t.exports=WebSocketManager)},733:()=>{class t{constructor(app){this.app=app,this.charts={},this.modalChart=null}async createMiniChart(t,e,o){try{const a=await api.getStockHistory(e,"1mo");if(!a||!a.data||0===a.data.length)return console.log(`No history data for mini chart: ${e}`),null;const n=document.getElementById(t);if(!n)return console.error(`Container not found: ${t}`),null;const s=document.createElement("canvas");s.id=`mini-chart-${e}`,s.width=100,s.height=40,s.style.cursor="pointer",s.onclick=()=>this.expandChart(e,o),n.innerHTML="",n.appendChild(s);const i=a.data.map(t=>parseFloat(t.close)),r=a.data.map(t=>t.date),c=o-i[0]>=0?"#10b981":"#ef4444";return this.charts[e]&&this.charts[e].destroy(),this.charts[e]=new Chart(s,{type:"line",data:{labels:r,datasets:[{data:i,borderColor:c,borderWidth:2,fill:!1,pointRadius:0,tension:.4}]},options:{responsive:!1,maintainAspectRatio:!1,plugins:{legend:{display:!1},tooltip:{enabled:!1}},scales:{x:{display:!1},y:{display:!1}}}}),this.charts[e]}catch(t){return console.error(`Error creating mini chart for ${e}:`,t),null}}async expandChart(t,e){try{let o=document.getElementById("chartExpandModal");o||(this.createChartModal(),o=document.getElementById("chartExpandModal"));const a=o.querySelector(".modal-content");a.innerHTML=`\n                <div class="modal-header">\n                    <h3>${t} - Kursverlauf</h3>\n                    <button class="close-btn" onclick="miniChartManager.closeExpandedChart()">&times;</button>\n                </div>\n                <div class="modal-body">\n                    <div class="loading-spinner">Lade Chart...</div>\n                </div>\n            `,o.style.display="flex";const n=await api.getStockHistory(t,"3mo");if(!n||!n.data||0===n.data.length)return void(a.querySelector(".modal-body").innerHTML="<p>Keine Daten verf√ºgbar</p>");const s=n.data.map(t=>t.date),i=n.data.map(t=>parseFloat(t.close)),r=n.data.map(t=>parseInt(t.volume)),c=e-i[0],d=(c/i[0]*100).toFixed(2),l=Math.min(...i),h=Math.max(...i),p=(r.reduce((t,e)=>t+e,0)/r.length/1e6).toFixed(2);a.innerHTML=`\n                <div class="modal-header">\n                    <div>\n                        <h3>${t} - Kursverlauf (3 Monate)</h3>\n                        <div class="chart-stats">\n                            <span>Aktuell: $${e.toFixed(2)}</span>\n                            <span class="${c>=0?"positive":"negative"}">\n                                ${c>=0?"‚ñ≤":"‚ñº"} ${Math.abs(d)}%\n                            </span>\n                            <span>Min: $${l.toFixed(2)}</span>\n                            <span>Max: $${h.toFixed(2)}</span>\n                            <span>√ò Volumen: ${p}M</span>\n                        </div>\n                    </div>\n                    <button class="close-btn" onclick="miniChartManager.closeExpandedChart()">&times;</button>\n                </div>\n                <div class="modal-body">\n                    <div class="chart-container-modal">\n                        <canvas id="expandedPriceChart"></canvas>\n                    </div>\n                    <div class="chart-container-modal">\n                        <h4>Volumen</h4>\n                        <canvas id="expandedVolumeChart"></canvas>\n                    </div>\n                    <div class="modal-actions">\n                        <button class="btn btn-primary" onclick="app.navigateToAnalysis('${t}')">\n                            Vollst√§ndige Analyse\n                        </button>\n                    </div>\n                </div>\n            `,this.renderExpandedPriceChart(s,i,e),this.renderExpandedVolumeChart(s,r)}catch(e){console.error(`Error expanding chart for ${t}:`,e),this.app.showNotification("Fehler beim Laden des Charts","error")}}createChartModal(){const t=document.createElement("div");t.id="chartExpandModal",t.className="chart-modal",t.innerHTML='<div class="modal-content"></div>',t.onclick=e=>{e.target===t&&this.closeExpandedChart()},document.body.appendChild(t)}closeExpandedChart(){const t=document.getElementById("chartExpandModal");t&&(t.style.display="none",this.modalChart&&(this.modalChart.destroy(),this.modalChart=null),this.modalVolumeChart&&(this.modalVolumeChart.destroy(),this.modalVolumeChart=null))}renderExpandedPriceChart(t,e,o){const a=document.getElementById("expandedPriceChart");if(!a)return;this.modalChart&&this.modalChart.destroy();const n=o-e[0]>=0?"#10b981":"#ef4444";this.modalChart=new Chart(a,{type:"line",data:{labels:t,datasets:[{label:"Preis",data:e,borderColor:n,backgroundColor:`${n}20`,fill:!0,tension:.4,borderWidth:2}]},options:{responsive:!0,maintainAspectRatio:!1,plugins:{legend:{display:!1},tooltip:{mode:"index",intersect:!1,callbacks:{label:t=>`Preis: $${t.parsed.y.toFixed(2)}`}}},scales:{x:{display:!0,ticks:{maxTicksLimit:8}},y:{display:!0,ticks:{callback:t=>"$"+t.toFixed(2)}}}}})}renderExpandedVolumeChart(t,e){const o=document.getElementById("expandedVolumeChart");o&&(this.modalVolumeChart&&this.modalVolumeChart.destroy(),this.modalVolumeChart=new Chart(o,{type:"bar",data:{labels:t,datasets:[{label:"Volumen",data:e,backgroundColor:"#667eea",borderWidth:0}]},options:{responsive:!0,maintainAspectRatio:!1,plugins:{legend:{display:!1},tooltip:{callbacks:{label:t=>`Volumen: ${(t.parsed.y/1e6).toFixed(2)}M`}}},scales:{x:{display:!0,ticks:{maxTicksLimit:8}},y:{display:!0,ticks:{callback:t=>(t/1e6).toFixed(1)+"M"}}}}}))}destroyAll(){Object.values(this.charts).forEach(t=>{t&&t.destroy()}),this.charts={},this.modalChart&&(this.modalChart.destroy(),this.modalChart=null),this.modalVolumeChart&&(this.modalVolumeChart.destroy(),this.modalVolumeChart=null)}}let e;document.addEventListener("DOMContentLoaded",()=>{"undefined"!=typeof app&&(e=new t(app))})},746:()=>{class t{constructor(){this.charts={},this.colors={primary:"rgba(102, 126, 234, 1)",primaryLight:"rgba(102, 126, 234, 0.5)",success:"rgba(72, 187, 120, 1)",successLight:"rgba(72, 187, 120, 0.5)",danger:"rgba(245, 101, 101, 1)",dangerLight:"rgba(245, 101, 101, 0.5)",warning:"rgba(237, 137, 54, 1)",info:"rgba(66, 153, 225, 1)",purple:"rgba(159, 122, 234, 1)",pink:"rgba(237, 100, 166, 1)",teal:"rgba(56, 178, 172, 1)",orange:"rgba(246, 173, 85, 1)",gradient1:["rgba(102, 126, 234, 0.8)","rgba(118, 75, 162, 0.8)"],gradient2:["rgba(72, 187, 120, 0.8)","rgba(56, 178, 172, 0.8)"],gradient3:["rgba(245, 101, 101, 0.8)","rgba(237, 100, 166, 0.8)"]}}createPortfolioDistribution(t,e){const o=document.getElementById(t);if(!o)return console.error(`Canvas ${t} not found`),null;this.charts[t]&&this.charts[t].destroy();const a=o.getContext("2d"),n=e.map(t=>t.ticker),s=e.map(t=>t.value),i=e.map(t=>t.percentage),r=[this.colors.primary,this.colors.success,this.colors.warning,this.colors.info,this.colors.purple,this.colors.pink,this.colors.teal,this.colors.orange],c=e.map((t,e)=>r[e%r.length]),d={type:"doughnut",data:{labels:n,datasets:[{label:"Portfolio Allocation",data:s,backgroundColor:c,borderColor:"rgba(26, 32, 44, 0.8)",borderWidth:2,hoverOffset:10}]},options:{responsive:!0,maintainAspectRatio:!1,plugins:{legend:{display:!0,position:"right",labels:{color:"rgba(255, 255, 255, 0.8)",font:{size:12,family:"'Inter', 'Segoe UI', sans-serif"},padding:15,usePointStyle:!0,generateLabels:t=>t.data.labels.map((t,e)=>({text:`${t} (${i[e].toFixed(1)}%)`,fillStyle:c[e],hidden:!1,index:e}))}},tooltip:{backgroundColor:"rgba(26, 32, 44, 0.95)",titleColor:"rgba(255, 255, 255, 0.9)",bodyColor:"rgba(255, 255, 255, 0.8)",borderColor:"rgba(102, 126, 234, 0.5)",borderWidth:1,padding:12,displayColors:!0,callbacks:{label:t=>{const e=t.label||"",o=t.parsed||0,a=i[t.dataIndex];return`${e}: $${o.toLocaleString("de-DE",{minimumFractionDigits:2,maximumFractionDigits:2})} (${a.toFixed(1)}%)`}}}},cutout:"65%",animation:{animateRotate:!0,animateScale:!0,duration:1e3,easing:"easeInOutQuart"}}};return this.charts[t]=new Chart(a,d),this.charts[t]}createPortfolioPerformance(t,e){const o=document.getElementById(t);if(!o)return console.error(`Canvas ${t} not found`),null;this.charts[t]&&this.charts[t].destroy();const a=o.getContext("2d"),n=e.map(t=>t.date),s=e.map(t=>t.value),i=a.createLinearGradient(0,0,0,400);i.addColorStop(0,"rgba(102, 126, 234, 0.4)"),i.addColorStop(1,"rgba(102, 126, 234, 0.01)");const r=s[0]||0,c=(s[s.length-1]||0)>=r,d=c?this.colors.success:this.colors.danger,l=a.createLinearGradient(0,0,0,400);c?(l.addColorStop(0,"rgba(72, 187, 120, 0.4)"),l.addColorStop(1,"rgba(72, 187, 120, 0.01)")):(l.addColorStop(0,"rgba(245, 101, 101, 0.4)"),l.addColorStop(1,"rgba(245, 101, 101, 0.01)"));const h={type:"line",data:{labels:n,datasets:[{label:"Portfolio Value",data:s,borderColor:d,backgroundColor:l,borderWidth:3,fill:!0,tension:.4,pointRadius:0,pointHoverRadius:6,pointHoverBackgroundColor:d,pointHoverBorderColor:"rgba(255, 255, 255, 0.8)",pointHoverBorderWidth:2}]},options:{responsive:!0,maintainAspectRatio:!1,interaction:{mode:"index",intersect:!1},plugins:{legend:{display:!1},tooltip:{backgroundColor:"rgba(26, 32, 44, 0.95)",titleColor:"rgba(255, 255, 255, 0.9)",bodyColor:"rgba(255, 255, 255, 0.8)",borderColor:"rgba(102, 126, 234, 0.5)",borderWidth:1,padding:12,displayColors:!1,callbacks:{label:t=>`Value: $${t.parsed.y.toLocaleString("de-DE",{minimumFractionDigits:2,maximumFractionDigits:2})}`}}},scales:{x:{display:!0,grid:{display:!1,drawBorder:!1},ticks:{color:"rgba(255, 255, 255, 0.6)",font:{size:11},maxTicksLimit:8}},y:{display:!0,position:"right",grid:{color:"rgba(255, 255, 255, 0.05)",drawBorder:!1},ticks:{color:"rgba(255, 255, 255, 0.6)",font:{size:11},callback:t=>"$"+t.toLocaleString("de-DE",{maximumFractionDigits:0})}}},animation:{duration:1e3,easing:"easeInOutQuart"}}};return this.charts[t]=new Chart(a,h),this.charts[t]}createWatchlistSparkline(t,e,o=!0){const a=document.getElementById(t);if(!a)return console.error(`Canvas ${t} not found`),null;this.charts[t]&&this.charts[t].destroy();const n=a.getContext("2d"),s=o?this.colors.success:this.colors.danger,i=o?"rgba(72, 187, 120, 0.2)":"rgba(245, 101, 101, 0.2)",r={type:"line",data:{labels:e.map((t,e)=>e),datasets:[{data:e,borderColor:s,backgroundColor:i,borderWidth:2,fill:!0,tension:.4,pointRadius:0,pointHoverRadius:0}]},options:{responsive:!0,maintainAspectRatio:!1,plugins:{legend:{display:!1},tooltip:{enabled:!1}},scales:{x:{display:!1},y:{display:!1}},animation:{duration:500},interaction:{mode:null}}};return this.charts[t]=new Chart(n,r),this.charts[t]}createSectorAllocation(t,e){const o=document.getElementById(t);if(!o)return console.error(`Canvas ${t} not found`),null;this.charts[t]&&this.charts[t].destroy();const a=o.getContext("2d"),n={type:"bar",data:{labels:e.map(t=>t.sector),datasets:[{label:"Sector Allocation (%)",data:e.map(t=>t.percentage),backgroundColor:e.map((t,e)=>{const o=[this.colors.primary,this.colors.success,this.colors.warning,this.colors.info,this.colors.purple];return o[e%o.length]}),borderColor:"rgba(26, 32, 44, 0.8)",borderWidth:1,borderRadius:8,barThickness:24}]},options:{indexAxis:"y",responsive:!0,maintainAspectRatio:!1,plugins:{legend:{display:!1},tooltip:{backgroundColor:"rgba(26, 32, 44, 0.95)",titleColor:"rgba(255, 255, 255, 0.9)",bodyColor:"rgba(255, 255, 255, 0.8)",borderColor:"rgba(102, 126, 234, 0.5)",borderWidth:1,padding:12,displayColors:!0,callbacks:{label:t=>{const e=t.parsed.x;return`${t.label}: ${e.toFixed(1)}%`}}}},scales:{x:{display:!0,grid:{color:"rgba(255, 255, 255, 0.05)",drawBorder:!1},ticks:{color:"rgba(255, 255, 255, 0.6)",font:{size:11},callback:t=>t+"%"},max:100},y:{display:!0,grid:{display:!1,drawBorder:!1},ticks:{color:"rgba(255, 255, 255, 0.7)",font:{size:12}}}},animation:{duration:1e3,easing:"easeInOutQuart"}}};return this.charts[t]=new Chart(a,n),this.charts[t]}destroyChart(t){this.charts[t]&&(this.charts[t].destroy(),delete this.charts[t])}destroyAllCharts(){Object.keys(this.charts).forEach(t=>{this.destroyChart(t)})}}"undefined"!=typeof window&&(window.DashboardChartsManager=t)},864:()=>{class MarketIndicesWidget{constructor(){this.charts={},this.updateInterval=null,this.indices=[{symbol:"SPY",name:"S&P 500 ETF",color:"rgb(72, 187, 120)"},{symbol:"QQQ",name:"NASDAQ-100 ETF",color:"rgb(245, 101, 101)"},{symbol:"SAP",name:"DAX (SAP)",color:"rgb(102, 126, 234)"}]}async init(t){const e=document.getElementById(t);e?(e.innerHTML=`\n            <div class="market-indices-grid">\n                ${this.indices.map(t=>`\n                    <div class="index-chart-card" id="${this.getChartId(t.symbol)}-card">\n                        <div class="index-chart-header">\n                            <div class="index-name">${t.name}</div>\n                            <div class="index-value" id="${this.getChartId(t.symbol)}-value">Loading...</div>\n                            <div class="index-change" id="${this.getChartId(t.symbol)}-change">-</div>\n                        </div>\n                        <div class="index-chart-container">\n                            <canvas id="${this.getChartId(t.symbol)}"></canvas>\n                        </div>\n                    </div>\n                `).join("")}\n            </div>\n        `,await Promise.all(this.indices.map(t=>this.loadIndexChart(t))),this.startAutoUpdate()):console.error(`Container ${t} not found`)}getChartId(t){return"chart-"+t.replace("^","")}async loadIndexChart(t){try{const e=await fetch(`/api/stock/${t.symbol}/history?period=5d`),o=await e.json();if(!o.data||0===o.data.length)throw new Error("No data available");const a=o.data,n=this.getChartId(t.symbol),s=a[a.length-1].close,i=a[0].open,r=s-i,c=r/i*100;document.getElementById(`${n}-value`).textContent=s.toLocaleString("de-DE",{minimumFractionDigits:2,maximumFractionDigits:2});const d=document.getElementById(`${n}-change`);d.textContent=`${r>=0?"+":""}${r.toFixed(2)} (${c.toFixed(2)}%)`,d.className="index-change "+(r>=0?"positive":"negative"),this.createSparklineChart(n,a,t.color,r>=0)}catch(e){console.error(`Error loading ${t.name} chart:`,e);const o=this.getChartId(t.symbol);document.getElementById(`${o}-value`).textContent="Error",document.getElementById(`${o}-change`).textContent="Failed to load"}}createSparklineChart(t,e,o,a){const n=document.getElementById(t);if(!n)return void console.error(`Canvas ${t} not found`);this.charts[t]&&this.charts[t].destroy();const s=n.getContext("2d"),i=e.map(t=>t.close),r=e.map(t=>new Date(t.date).toLocaleDateString("de-DE",{day:"2-digit",month:"2-digit"})),c=s.createLinearGradient(0,0,0,n.height);a?(c.addColorStop(0,"rgba(72, 187, 120, 0.3)"),c.addColorStop(1,"rgba(72, 187, 120, 0.01)")):(c.addColorStop(0,"rgba(245, 101, 101, 0.3)"),c.addColorStop(1,"rgba(245, 101, 101, 0.01)")),this.charts[t]=new Chart(s,{type:"line",data:{labels:r,datasets:[{data:i,borderColor:o,backgroundColor:c,borderWidth:2,fill:!0,tension:.4,pointRadius:0,pointHoverRadius:4,pointHoverBackgroundColor:o,pointHoverBorderColor:"#fff",pointHoverBorderWidth:2}]},options:{responsive:!0,maintainAspectRatio:!1,interaction:{mode:"index",intersect:!1},plugins:{legend:{display:!1},tooltip:{backgroundColor:"rgba(26, 32, 44, 0.95)",titleColor:"rgba(255, 255, 255, 0.9)",bodyColor:"rgba(255, 255, 255, 0.8)",borderColor:o,borderWidth:1,padding:10,displayColors:!1,callbacks:{title:t=>t[0].label,label:t=>t.parsed.y.toLocaleString("de-DE",{minimumFractionDigits:2,maximumFractionDigits:2})}}},scales:{x:{display:!1},y:{display:!1}},animation:{duration:500}}})}startAutoUpdate(){this.updateInterval=setInterval(()=>{this.indices.forEach(t=>this.loadIndexChart(t))},3e5)}stopAutoUpdate(){this.updateInterval&&(clearInterval(this.updateInterval),this.updateInterval=null)}destroy(){this.stopAutoUpdate(),Object.values(this.charts).forEach(t=>{t&&t.destroy()}),this.charts={}}}"undefined"!=typeof window&&(window.MarketIndicesWidget=MarketIndicesWidget)}},e={};function o(a){var n=e[a];if(void 0!==n)return n.exports;var s=e[a]={exports:{}};return t[a](s,s.exports,o),s.exports}o(746),o(864),o(733);o(243)})();