(()=>{const api=new class{constructor(){this.baseURL="/api",this.token=localStorage.getItem("access_token"),this.refreshToken=localStorage.getItem("refresh_token")}setTokens(e,t){this.token=e,this.refreshToken=t,localStorage.setItem("access_token",e),localStorage.setItem("refresh_token",t)}clearTokens(){this.token=null,this.refreshToken=null,localStorage.removeItem("access_token"),localStorage.removeItem("refresh_token")}async request(e,t={}){const n=`${this.baseURL}${e}`,a={...t,headers:{"Content-Type":"application/json",...t.headers}};this.token&&(a.headers.Authorization=`Bearer ${this.token}`);try{const e=await fetch(n,a);if(401===e.status&&this.refreshToken&&await this.refreshAccessToken()){a.headers.Authorization=`Bearer ${this.token}`;const e=await fetch(n,a);return await this.handleResponse(e)}return await this.handleResponse(e)}catch(e){throw e}}async handleResponse(e){const t=await e.json();if(!e.ok)throw new Error(t.error||`HTTP error! status: ${e.status}`);return t}async refreshAccessToken(){try{const e=await fetch(`${this.baseURL}/auth/refresh`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.refreshToken}`}});if(e.ok){const t=await e.json();return this.token=t.access_token,localStorage.setItem("access_token",this.token),!0}}catch(e){console.error("Failed to refresh token:",e)}return this.clearTokens(),!1}async login(e,t){const n=await this.request("/auth/login",{method:"POST",body:JSON.stringify({email:e,password:t})});return this.setTokens(n.access_token,n.refresh_token),n}async register(e,t,n){const a=await this.request("/auth/register",{method:"POST",body:JSON.stringify({email:e,username:t,password:n})});return this.setTokens(a.access_token,a.refresh_token),a}async logout(){await this.request("/auth/logout",{method:"POST"}),this.clearTokens()}async getProfile(){return await this.request("/auth/profile")}async updateProfile(e){return await this.request("/auth/profile",{method:"PUT",body:JSON.stringify(e)})}async getStock(e){return await this.request(`/stock/${e}`)}async getStockHistory(e,t="1y"){return await this.request(`/stock/${e}/history?period=${t}`)}async analyzeWithAI(e){return await this.request("/stock/analyze-with-ai",{method:"POST",body:JSON.stringify({ticker:e})})}async getBatchQuotes(e){return await this.request("/stock/batch",{method:"POST",body:JSON.stringify({tickers:e})})}async searchStocks(e){return await this.request(`/stock/search?q=${encodeURIComponent(e)}`)}async getRecommendations(){return await this.request("/stock/recommendations")}async getPortfolio(){return await this.request("/portfolio/")}async addTransaction(e){return await this.request("/portfolio/transaction",{method:"POST",body:JSON.stringify(e)})}async getTransactions(e=null,t=50){let n=`/portfolio/transactions?limit=${t}`;return e&&(n+=`&ticker=${e}`),await this.request(n)}async getPortfolioPerformance(e="1M"){return await this.request(`/portfolio/performance?period=${e}`)}async getWatchlist(){return await this.request("/watchlist/")}async addToWatchlist(e,t="",n=[]){return await this.request("/watchlist/",{method:"POST",body:JSON.stringify({ticker:e,notes:t,tags:n})})}async removeFromWatchlist(e){return await this.request(`/watchlist/${e}`,{method:"DELETE"})}async updateWatchlistItem(e,t){return await this.request(`/watchlist/${e}`,{method:"PUT",body:JSON.stringify(t)})}async screenStocks(e){return await this.request("/screener/",{method:"POST",body:JSON.stringify(e)})}async getScreenerPresets(){return await this.request("/screener/presets")}async applyPresetScreen(e){return await this.request(`/screener/presets/${e}`,{method:"POST"})}async getSectors(){return await this.request("/screener/sectors")}async getAlerts(e=!1){return await this.request(`/alerts/?active_only=${e}`)}async createAlert(e){return await this.request("/alerts/",{method:"POST",body:JSON.stringify(e)})}async updateAlert(e,t){return await this.request(`/alerts/${e}`,{method:"PUT",body:JSON.stringify(t)})}async deleteAlert(e){return await this.request(`/alerts/${e}`,{method:"DELETE"})}async getAlertStatistics(){return await this.request("/alerts/statistics")}async getAIRecommendations(){return await this.request("/stock/ai-recommendations",{method:"POST"})}async compareStocks(e,t="1y"){return await this.request("/stock/compare",{method:"POST",body:JSON.stringify({tickers:e,period:t})})}async getStockNews(e,t=10,n=7){return await this.request(`/stock/${e}/news?limit=${t}&days=${n}`)}async getMarketNews(e=20){return await this.request(`/stock/news/market?limit=${e}`)}async getTriggeredAlerts(){return await this.request("/alerts/triggered")}async acknowledgeAlert(e){return await this.request(`/alerts/${e}/acknowledge`,{method:"POST"})}async searchStocks(e){return await this.request(`/stock/search?q=${encodeURIComponent(e)}`)}async checkAdmin(){return await this.request("/admin/check")}async getAdminStats(){return await this.request("/admin/stats")}async getAdminUsers(e={}){const t=new URLSearchParams;e.page&&t.append("page",e.page),e.per_page&&t.append("per_page",e.per_page),e.search&&t.append("search",e.search),void 0!==e.is_admin&&t.append("is_admin",e.is_admin);const n=t.toString();return await this.request("/admin/users"+(n?"?"+n:""))}async getAdminUserDetails(e){return await this.request(`/admin/users/${e}`)}async updateAdminUser(e,t){return await this.request(`/admin/users/${e}`,{method:"PUT",body:JSON.stringify(t)})}async deleteAdminUser(e){return await this.request(`/admin/users/${e}`,{method:"DELETE"})}async toggleAdminStatus(e){return await this.request(`/admin/users/${e}/toggle-admin`,{method:"POST"})}};"undefined"!=typeof window&&(window.api=api)})(),(()=>{class ThemeManager{constructor(){this.themes=["auto","light","dark"],this.currentTheme=localStorage.getItem("theme")||"auto",this.init()}init(){this.applyTheme(),this.watchSystemTheme(),this.createThemeToggle()}applyTheme(){const e=document.body;if("auto"===this.currentTheme){const t=window.matchMedia("(prefers-color-scheme: dark)").matches;e.classList.toggle("dark-theme",t),e.classList.remove("light-theme")}else"dark"===this.currentTheme?(e.classList.add("dark-theme"),e.classList.remove("light-theme")):(e.classList.add("light-theme"),e.classList.remove("dark-theme"));this.updateToggleIcon()}watchSystemTheme(){window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change",()=>{"auto"===this.currentTheme&&this.applyTheme()})}toggleTheme(){const e=this.themes.indexOf(this.currentTheme);this.currentTheme=this.themes[(e+1)%this.themes.length],localStorage.setItem("theme",this.currentTheme),this.applyTheme()}createThemeToggle(){const e=document.querySelector(".nav-user");if(!e)return;const t=document.createElement("button");t.className="theme-toggle-btn btn-icon",t.id="themeToggle",t.title="Toggle Theme (Auto/Light/Dark)",t.onclick=()=>this.toggleTheme(),e.insertBefore(t,e.firstChild),this.updateToggleIcon()}updateToggleIcon(){const e=document.getElementById("themeToggle");e&&(e.textContent={auto:"🌓",light:"☀️",dark:"🌙"}[this.currentTheme]||"🌓",e.title=`Theme: ${this.currentTheme.charAt(0).toUpperCase()+this.currentTheme.slice(1)}`)}getCurrentTheme(){return this.currentTheme}setTheme(e){this.themes.includes(e)&&(this.currentTheme=e,localStorage.setItem("theme",e),this.applyTheme())}}"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>{window.themeManager=new ThemeManager}):window.themeManager=new ThemeManager})(),(()=>{class MarketStatusWidget{constructor(){this.markets={NYSE:{name:"NYSE",timezone:"America/New_York",open:"09:30",close:"16:00",preMarketOpen:"04:00",afterHoursClose:"20:00"},NASDAQ:{name:"NASDAQ",timezone:"America/New_York",open:"09:30",close:"16:00",preMarketOpen:"04:00",afterHoursClose:"20:00"},XETRA:{name:"Frankfurt",timezone:"Europe/Berlin",open:"09:00",close:"17:30",preMarketOpen:"08:00",afterHoursClose:"22:00"}},this.updateInterval=null,this.init()}init(){this.createWidget(),this.update(),this.updateInterval=setInterval(()=>this.update(),6e4)}createWidget(){const e=document.querySelector(".nav-user");if(!e)return;const t=document.createElement("div");t.className="market-status-widget",t.id="marketStatus";const n=document.getElementById("themeToggle");n?e.insertBefore(t,n):e.insertBefore(t,e.firstChild)}getMarketStatus(e){const t=new Date,n=this.markets[e],a=60*t.getHours()+t.getMinutes(),[s,i]=n.open.split(":").map(Number),[r,o]=n.close.split(":").map(Number),c=60*s+i,l=60*r+o,[d,h]=n.preMarketOpen.split(":").map(Number),[u,m]=n.afterHoursClose.split(":").map(Number),p=60*d+h,g=60*u+m,y=t.getDay();return 0===y||6===y?{status:"closed",label:"Closed (Weekend)",class:"closed"}:a>=c&&a<l?{status:"open",label:"Market Open",class:"open",countdown:this.getCountdown(l-a)}:a>=p&&a<c?{status:"pre-market",label:"Pre-Market",class:"pre-market",countdown:this.getCountdown(c-a)}:a>=l&&a<g?{status:"after-hours",label:"After Hours",class:"after-hours",countdown:this.getCountdown(g-a)}:{status:"closed",label:"Market Closed",class:"closed",countdown:this.getCountdown(1440-a+c)}}getCountdown(e){const t=Math.floor(e/60),n=e%60;return t>0?`${t}h ${n}m`:`${n}m`}update(){const e=document.getElementById("marketStatus");if(!e)return;const t=this.getMarketStatus("NYSE");e.innerHTML=`\n            <div class="market-status-indicator ${t.class}" title="NYSE Market Status">\n                <span class="status-dot"></span>\n                <span class="status-text">${t.label}</span>\n                ${t.countdown?`<span class="status-countdown">(${t.countdown})</span>`:""}\n            </div>\n        `}destroy(){this.updateInterval&&clearInterval(this.updateInterval)}}"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>{window.marketStatus=new MarketStatusWidget}):window.marketStatus=new MarketStatusWidget})(),(()=>{class e{constructor(app){this.app=app,this.input=document.getElementById("globalSearch"),this.dropdown=document.getElementById("searchDropdown"),this.searchHistory=JSON.parse(localStorage.getItem("searchHistory"))||[],this.input&&this.dropdown&&this.init()}init(){let e;this.input.addEventListener("input",t=>{clearTimeout(e);const n=t.target.value.trim();0!==n.length?e=setTimeout(()=>this.handleSearch(n),300):this.showRecentSearches()}),this.input.addEventListener("keydown",e=>{if("Enter"===e.key){e.preventDefault();const t=this.input.value.trim().toUpperCase();t&&this.selectTicker(t)}}),this.input.addEventListener("focus",()=>{0===this.input.value.trim().length&&this.showRecentSearches()}),document.addEventListener("click",e=>{this.input.contains(e.target)||this.dropdown.contains(e.target)||(this.dropdown.style.display="none")}),document.addEventListener("keydown",e=>{(e.ctrlKey||e.metaKey)&&"k"===e.key&&(e.preventDefault(),this.input.focus(),this.input.select()),"Escape"===e.key&&document.activeElement===this.input&&(this.input.value="",this.dropdown.style.display="none",this.input.blur())})}async handleSearch(e){if(!e||e.length<1)this.showRecentSearches();else try{const t=(await api.searchStocks(e)).results||[];this.showResults(t,e)}catch(e){console.error("Search error:",e),this.dropdown.innerHTML='<div class="search-no-results">Fehler beim Suchen</div>',this.dropdown.style.display="block"}}showResults(e,t){if(0===e.length)return this.dropdown.innerHTML=`\n                <div class="search-no-results">\n                    Keine Ergebnisse für "${t}"\n                </div>\n            `,void(this.dropdown.style.display="block");this.dropdown.innerHTML=e.slice(0,8).map(e=>`\n            <div class="search-result-item" onclick="globalSearch.selectTicker('${e.ticker}')">\n                <div class="search-result-main">\n                    <div class="search-result-ticker">${e.ticker}</div>\n                    <div class="search-result-name">${e.company_name||e.name||""}</div>\n                </div>\n            </div>\n        `).join(""),this.dropdown.style.display="block"}showRecentSearches(){0!==this.searchHistory.length?(this.dropdown.innerHTML=`\n            <div class="search-section-header">Zuletzt gesucht</div>\n            ${this.searchHistory.map(e=>`\n                <div class="search-result-item" onclick="globalSearch.selectTicker('${e}')">\n                    <div class="search-result-main">\n                        <div class="search-result-ticker">${e}</div>\n                        <span class="search-history-icon">🕐</span>\n                    </div>\n                </div>\n            `).join("")}\n            <div class="search-clear-history">\n                <button class="btn-link" onclick="globalSearch.clearHistory()">Verlauf löschen</button>\n            </div>\n        `,this.dropdown.style.display="block"):this.dropdown.style.display="none"}selectTicker(e){(e=e.toUpperCase().trim())&&(this.addToHistory(e),this.input.value="",this.dropdown.style.display="none",this.app.navigateToAnalysis(e))}addToHistory(e){this.searchHistory=this.searchHistory.filter(t=>t!==e),this.searchHistory.unshift(e),this.searchHistory=this.searchHistory.slice(0,10),localStorage.setItem("searchHistory",JSON.stringify(this.searchHistory))}clearHistory(){this.searchHistory=[],localStorage.removeItem("searchHistory"),this.dropdown.style.display="none",this.app.showNotification("Suchverlauf gelöscht","success")}}let t;document.addEventListener("DOMContentLoaded",()=>{"undefined"!=typeof app&&(t=new e(app))})})(),(()=>{class e{constructor(app){this.app=app,this.panel=document.getElementById("notificationPanel"),this.badge=document.getElementById("notificationBadge"),this.button=document.getElementById("notificationBtn"),this.checkInterval=null,this.panel&&this.badge&&this.button&&this.init()}async init(){this.button.addEventListener("click",()=>this.togglePanel()),document.addEventListener("click",e=>{this.button.contains(e.target)||this.panel.contains(e.target)||(this.panel.style.display="none")}),this.requestPermission(),this.checkInterval=setInterval(()=>this.checkForNotifications(),3e4),await this.checkForNotifications()}async checkForNotifications(){try{const e=await api.getTriggeredAlerts(),t=e.length;if(this.badge.textContent=t,this.badge.style.display=t>0?"flex":"none",t>0){const t=e[0];localStorage.getItem("lastShownAlertId")!==String(t.id)&&(this.showNotificationToast(t),localStorage.setItem("lastShownAlertId",String(t.id)))}}catch(e){console.error("Error checking notifications:",e)}}showNotificationToast(e){"Notification"in window&&"granted"===Notification.permission&&new Notification(`Alert: ${e.ticker}`,{body:`Price ${"above"===e.condition_type?"über":"unter"} ${e.target_price}. Aktuell: ${e.current_price}`,icon:"/static/images/icon-192.png",tag:`alert-${e.id}`,requireInteraction:!0}),this.app.showNotification(`🔔 Alert ausgelöst: ${e.ticker} ist jetzt ${e.current_price}`,"info",1e4)}togglePanel(){const e="block"===this.panel.style.display;this.panel.style.display=e?"none":"block",e||this.loadNotifications()}async loadNotifications(){const e=document.getElementById("notificationList");e.innerHTML='<div class="loading-notifications">Lade...</div>';try{const t=await api.getTriggeredAlerts();if(0===t.length)return void(e.innerHTML='<p class="no-notifications">Keine neuen Benachrichtigungen</p>');e.innerHTML=t.map(e=>this.createNotificationItem(e)).join("")}catch(t){console.error("Error loading notifications:",t),e.innerHTML='<p class="error-notifications">Fehler beim Laden</p>'}}createNotificationItem(e){const t=this.formatTimeAgo(e.triggered_at),n="above"===e.condition_type?"über":"unter";return`\n            <div class="notification-item" data-id="${e.id}">\n                <div class="notification-content">\n                    <div class="notification-title">\n                        <strong>${e.ticker}</strong>\n                        <span class="notification-time">${t}</span>\n                    </div>\n                    <div class="notification-message">\n                        Preis ${n} ${e.target_price} erreicht\n                    </div>\n                    <div class="notification-price">\n                        Aktuell: <strong>${e.current_price}</strong>\n                    </div>\n                </div>\n                <button class="notification-dismiss" onclick="notificationCenter.acknowledgeAlert(${e.id}, event)">\n                    ✓\n                </button>\n            </div>\n        `}async acknowledgeAlert(e,t){t&&t.stopPropagation();try{await api.acknowledgeAlert(e);const t=document.querySelector(`.notification-item[data-id="${e}"]`);t&&(t.style.opacity="0",setTimeout(()=>t.remove(),300)),await this.checkForNotifications(),"block"===this.panel.style.display&&await this.loadNotifications()}catch(e){console.error("Error acknowledging alert:",e),this.app.showNotification("Fehler beim Bestätigen","error")}}async markAllRead(){try{const e=await api.getTriggeredAlerts();for(const t of e)await api.acknowledgeAlert(t.id);await this.checkForNotifications(),await this.loadNotifications(),this.app.showNotification("Alle Benachrichtigungen gelesen","success")}catch(e){console.error("Error marking all read:",e),this.app.showNotification("Fehler","error")}}formatTimeAgo(e){const t=new Date(e),n=new Date-t,a=Math.floor(n/6e4),s=Math.floor(n/36e5),i=Math.floor(n/864e5);return a<1?"Gerade eben":a<60?`vor ${a} Min`:s<24?`vor ${s} Std`:i<7?`vor ${i} Tag${i>1?"en":""}`:t.toLocaleDateString("de-DE")}requestPermission(){"Notification"in window&&"default"===Notification.permission&&Notification.requestPermission().then(e=>{"granted"===e&&console.log("Notification permission granted")})}destroy(){this.checkInterval&&clearInterval(this.checkInterval)}}let t;document.addEventListener("DOMContentLoaded",()=>{"undefined"!=typeof app&&app.currentUser&&(t=new e(app))})})(),new class{constructor(){this.charts={},this.defaultOptions={responsive:!0,maintainAspectRatio:!1,plugins:{legend:{position:"top"},tooltip:{mode:"index",intersect:!1}}}}createPortfolioChart(e,t){const n=document.getElementById(e);n&&(this.charts[e]&&this.charts[e].destroy(),this.charts[e]=new Chart(n,{type:"doughnut",data:{labels:t.labels,datasets:[{data:t.values,backgroundColor:["#667eea","#764ba2","#48bb78","#ed8936","#4299e1","#f56565"],borderWidth:0}]},options:{...this.defaultOptions,plugins:{...this.defaultOptions.plugins,legend:{position:"right"}}}}))}createPriceChart(e,t){const n=document.getElementById(e);n&&(this.charts[e]&&this.charts[e].destroy(),this.charts[e]=new Chart(n,{type:"line",data:{labels:t.map(e=>e.date),datasets:[{label:"Schlusskurs",data:t.map(e=>e.close),borderColor:"#667eea",backgroundColor:"rgba(102, 126, 234, 0.1)",tension:.1,fill:!0}]},options:{...this.defaultOptions,scales:{x:{type:"time",time:{unit:"day"}},y:{beginAtZero:!1,ticks:{callback:function(e){return"$"+e.toFixed(2)}}}}}}))}createDiversificationChart(e,t){const n=document.getElementById(e);n&&(this.charts[e]&&this.charts[e].destroy(),this.charts[e]=new Chart(n,{type:"pie",data:{labels:Object.keys(t.by_sector),datasets:[{data:Object.values(t.by_sector),backgroundColor:["#667eea","#764ba2","#48bb78","#ed8936","#4299e1","#f56565","#38b2ac","#d69e2e"]}]},options:{...this.defaultOptions,plugins:{...this.defaultOptions.plugins,tooltip:{callbacks:{label:function(e){return e.label+": "+e.parsed.toFixed(2)+"%"}}}}}}))}destroyChart(e){this.charts[e]&&(this.charts[e].destroy(),delete this.charts[e])}destroyAllCharts(){Object.keys(this.charts).forEach(e=>{this.destroyChart(e)})}},window.exportManager=new class{constructor(){this.jsPdfLoaded=!1,this.html2canvasLoaded=!1}async exportAnalysisPDF(e,t){try{await this.loadLibraries();const{jsPDF:n}=window.jspdf,a=new n;a.setFontSize(20),a.text(`Stock Analysis: ${e}`,20,20),a.setFontSize(10),a.text(`Generated: ${(new Date).toLocaleString()}`,20,30),a.setFontSize(14),a.text("Stock Information",20,45),a.setFontSize(10);let s=55;if(t.info){const n=t.info;a.text(`Company: ${n.company_name||e}`,20,s),s+=7,a.text(`Price: $${n.current_price?.toFixed(2)||"N/A"}`,20,s),s+=7,a.text(`Market Cap: ${this.formatMarketCap(n.market_cap)}`,20,s),s+=7,a.text(`Sector: ${n.sector||"N/A"}`,20,s),s+=7}if(t.technical){s+=10,a.setFontSize(14),a.text("Technical Indicators",20,s),s+=10,a.setFontSize(10);const e=t.technical;e.rsi&&(a.text(`RSI: ${e.rsi.toFixed(2)}`,20,s),s+=7),e.sma_20&&(a.text(`SMA 20: $${e.sma_20.toFixed(2)}`,20,s),s+=7),e.sma_50&&(a.text(`SMA 50: $${e.sma_50.toFixed(2)}`,20,s),s+=7)}if(t.aiAnalysis){s+=10,a.setFontSize(14),a.text("AI Analysis Summary",20,s),s+=10,a.setFontSize(10);const e=t.aiAnalysis.recommendation||"No summary available";a.splitTextToSize(e,170).forEach(e=>{s>270&&(a.addPage(),s=20),a.text(e,20,s),s+=7})}return a.save(`${e}_analysis_${(new Date).toISOString().split("T")[0]}.pdf`),!0}catch(e){throw console.error("PDF export error:",e),new Error("Failed to export PDF")}}exportPortfolioCSV(e){try{const t=["Ticker","Company","Shares","Avg Cost","Current Price","Current Value","Gain/Loss","Gain/Loss %"],n=[];n.push(t.join(",")),e.items&&e.items.forEach(e=>{const t=[e.ticker,this.escapeCsv(e.company_name||""),e.shares||0,e.average_cost?.toFixed(2)||"0.00",e.current_price?.toFixed(2)||"0.00",e.current_value?.toFixed(2)||"0.00",e.gain_loss?.toFixed(2)||"0.00",e.gain_loss_percent?.toFixed(2)||"0.00"];n.push(t.join(","))}),n.push(""),n.push(`Total Value,${e.total_value?.toFixed(2)||"0.00"}`),n.push(`Total Gain/Loss,${e.total_gain_loss?.toFixed(2)||"0.00"}`),n.push(`Total Return %,${e.total_return?.toFixed(2)||"0.00"}`);const a=n.join("\n"),s=`portfolio_${(new Date).toISOString().split("T")[0]}.csv`;return this.downloadFile(a,s,"text/csv"),!0}catch(e){throw console.error("CSV export error:",e),new Error("Failed to export CSV")}}exportWatchlistCSV(e){try{const t=["Ticker","Company","Current Price","Change %","Added Date"],n=[];n.push(t.join(",")),e&&e.forEach(e=>{const t=[e.ticker,this.escapeCsv(e.company_name||""),e.current_price?.toFixed(2)||"0.00",e.price_change_percent?.toFixed(2)||"0.00",e.added_date||(new Date).toISOString().split("T")[0]];n.push(t.join(","))});const a=n.join("\n"),s=`watchlist_${(new Date).toISOString().split("T")[0]}.csv`;return this.downloadFile(a,s,"text/csv"),!0}catch(e){throw console.error("CSV export error:",e),new Error("Failed to export CSV")}}escapeCsv(e){if(null==e)return"";const t=String(e);return t.includes(",")||t.includes('"')||t.includes("\n")?`"${t.replace(/"/g,'""')}"`:t}formatMarketCap(e){return e?e>=1e12?`$${(e/1e12).toFixed(2)}T`:e>=1e9?`$${(e/1e9).toFixed(2)}B`:e>=1e6?`$${(e/1e6).toFixed(2)}M`:`$${e.toFixed(2)}`:"N/A"}downloadFile(e,t,n){const a=new Blob([e],{type:n}),s=URL.createObjectURL(a),i=document.createElement("a");i.href=s,i.download=t,document.body.appendChild(i),i.click(),document.body.removeChild(i),URL.revokeObjectURL(s)}async loadLibraries(){if(!window.jspdf&&!this.jsPdfLoaded)return new Promise((e,t)=>{const n=document.createElement("script");n.src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js",n.onload=()=>{this.jsPdfLoaded=!0,e()},n.onerror=t,document.head.appendChild(n)})}},new class{constructor(){this.widgets={portfolio:!0,watchlist:!0,news:!0,"ai-recommendations":!0},this.customizationPanel=document.getElementById("customizationPanel"),this.loadSettings()}loadSettings(){const e=localStorage.getItem("dashboardWidgets");if(e)try{this.widgets=JSON.parse(e)}catch(e){console.error("Error loading dashboard settings:",e)}this.applySettings()}applySettings(){Object.keys(this.widgets).forEach(e=>{const t=document.getElementById(`${e}-widget`),n=document.getElementById(`toggle-${e}`);t&&(t.style.display=this.widgets[e]?"block":"none"),n&&(n.checked=this.widgets[e])})}toggleCustomization(){if(!this.customizationPanel)return;const e="block"===this.customizationPanel.style.display;this.customizationPanel.style.display=e?"none":"block"}saveCustomization(){Object.keys(this.widgets).forEach(e=>{const t=document.getElementById(`toggle-${e}`);t&&(this.widgets[e]=t.checked)}),localStorage.setItem("dashboardWidgets",JSON.stringify(this.widgets)),this.applySettings(),this.toggleCustomization(),"undefined"!=typeof app&&app.showNotification("Dashboard-Einstellungen gespeichert","success")}resetToDefault(){this.widgets={portfolio:!0,watchlist:!0,news:!0,"ai-recommendations":!0},localStorage.setItem("dashboardWidgets",JSON.stringify(this.widgets)),this.applySettings(),"undefined"!=typeof app&&app.showNotification("Dashboard-Einstellungen zurückgesetzt","success")}},(()=>{class StockAnalyzerApp{constructor(){this.currentPage="dashboard",this.currentUser=null,this.aiVisualizer=new AIAnalysisVisualizer,this.technicalChartsManager="undefined"!=typeof TechnicalChartsManager?new TechnicalChartsManager:null,this.dashboardChartsManager="undefined"!=typeof DashboardChartsManager?new DashboardChartsManager:null,this.currentAnalysisTicker=null,this.currentStockPrice=null,this.currentStockData=null,this.currentTechnicalData=null,this.currentPeriod="1y",this.priceChartInstance=null,this.volumeChartInstance=null,this.compareChartInstance=null,this.priceHistoryData=null,this.showSMA50=!1,this.showSMA200=!1,this.websocketManager=new WebSocketManager,this.init()}init(){this.setupEventListeners(),this.checkAuthentication(),this.loadDashboard(),this.setupNavigation(),this.setupForms()}setupEventListeners(){document.querySelectorAll(".nav-link").forEach(e=>{e.addEventListener("click",t=>{t.preventDefault();const n=e.dataset.page;this.navigateToPage(n)})});const e=document.getElementById("navToggle"),t=document.getElementById("navMenu");e?.addEventListener("click",()=>{t.classList.toggle("active")}),document.querySelectorAll(".tab-btn").forEach(e=>{e.addEventListener("click",e=>{const t=e.target.closest(".alert-tabs, .tab-buttons");e.target.dataset.tab||e.target.dataset.analysisTab,t.querySelectorAll(".tab-btn").forEach(e=>e.classList.remove("active")),e.target.classList.add("active"),e.target.dataset.analysisTab&&this.switchAnalysisTab(e.target.dataset.analysisTab)})})}setupNavigation(){window.addEventListener("popstate",e=>{e.state&&e.state.page&&this.navigateToPage(e.state.page,!1)})}setupForms(){const e=document.getElementById("loginForm");e?.addEventListener("submit",async e=>{e.preventDefault(),await this.handleLogin()});const t=document.getElementById("registerForm");t?.addEventListener("submit",async e=>{e.preventDefault(),await this.handleRegister()});const n=document.getElementById("stockSearchForm");n?.addEventListener("submit",async e=>{e.preventDefault(),await this.analyzeStock()});const a=document.getElementById("screenerForm");a?.addEventListener("submit",async e=>{e.preventDefault(),await this.runScreener()});const s=document.getElementById("alertForm");s?.addEventListener("submit",async e=>{e.preventDefault(),await this.handleCreateAlert(e)});const i=document.getElementById("transactionForm");i?.addEventListener("submit",async e=>{e.preventDefault(),await this.handleAddTransaction(e)});const r=document.getElementById("watchlistForm");r?.addEventListener("submit",async e=>{e.preventDefault(),await this.handleAddToWatchlist(e)});const o=document.getElementById("registerPasswordConfirm"),c=document.getElementById("registerPassword");o?.addEventListener("input",()=>{const e=document.getElementById("passwordMatch");c.value===o.value&&c.value.length>=6?(e.textContent="✓ Passwörter stimmen überein",e.style.color="#27ae60"):o.value.length>0?(e.textContent="❌ Passwörter stimmen nicht überein",e.style.color="#e74c3c"):e.textContent=""})}async checkAuthentication(){if(api.token)try{const e=await api.getProfile();this.currentUser=e.user,this.updateUserDisplay(),await this.setupWebSocket()}catch(e){console.error("Auth check failed:",e),api.clearTokens()}}async setupWebSocket(){try{console.log("[App] Setting up WebSocket connection..."),await this.websocketManager.connect(),this.websocketManager.onPriceUpdate=e=>{console.log("[App] 📊 Real-time price update:",e),this.updatePriceInUI(e.symbol,e.price)},this.websocketManager.onConnectionChange=e=>{console.log(`[App] WebSocket status: ${e}`),this.updateRealtimeStatusLight(e)}}catch(e){console.error("[App] WebSocket setup failed:",e)}}updatePriceInUI(e,t){const n=e.toUpperCase();if(console.log(`[App] Updating UI for ${n}: $${t.toFixed(2)}`),document.querySelectorAll(".watchlist-item").forEach(e=>{const a=e.querySelector(".watchlist-item-ticker");if(a&&a.textContent.trim()===n){const n=e.querySelector(".watchlist-item-current");if(n){const e=parseFloat(n.textContent.replace("$",""));n.textContent=`$${t.toFixed(2)}`,n.classList.add(t>e?"price-up":"price-down"),setTimeout(()=>{n.classList.remove("price-up","price-down")},1e3)}}}),this.currentAnalysisTicker===n){const e=document.getElementById("stockPrice");if(e){const n=e.querySelector(".price-current");if(n){const a=parseFloat(n.textContent.replace("$",""));n.textContent=`$${t.toFixed(2)}`,this.currentStockPrice=t,n.classList.add(t>a?"price-up":"price-down"),setTimeout(()=>{n.classList.remove("price-up","price-down")},1e3);const s=e.querySelector(".price-change-percent");if(s&&a){const e=((t-a)/a*100).toFixed(2),n=e>=0?"+":"";s.textContent=`${n}${e}%`,s.className="price-change-percent "+(e>=0?"positive":"negative")}}}}document.querySelectorAll(".portfolio-item").forEach(e=>{const a=e.querySelector(".portfolio-ticker");if(a&&a.textContent.trim()===n){const n=e.querySelector(".portfolio-current-price");n&&(n.textContent=`$${t.toFixed(2)}`)}})}updateRealtimeStatusLight(e){let t=document.getElementById("realtimeStatusLight");if(!t){const e=document.querySelector(".nav-right");if(!e)return void console.warn("[App] Could not find navbar to add status light");{t=document.createElement("div"),t.id="realtimeStatusLight",t.className="realtime-status-light",t.title="Echtzeit-Status";const n=e.querySelector(".theme-toggle-container");n?e.insertBefore(t,n):e.appendChild(t)}}switch(t.classList.remove("connected","connecting","disconnected","error"),e){case"connected":t.classList.add("connected"),t.title="Echtzeit aktiv";break;case"connecting":t.classList.add("connecting"),t.title="Verbinde...";break;case"disconnected":t.classList.add("disconnected"),t.title="Nicht Echtzeit";break;case"error":case"failed":t.classList.add("error"),t.title="Verbindungsfehler";break;default:t.classList.add("disconnected"),t.title="Unbekannter Status"}}updateUserDisplay(){const e=document.getElementById("userDisplay"),t=document.getElementById("loginBtn"),n=document.getElementById("username"),a=document.getElementById("navNotifications");this.currentUser?(e.style.display="flex",t.style.display="none",n.textContent=this.currentUser.username,a&&(a.style.display="block"),"undefined"==typeof NotificationCenter||window.notificationCenter||(window.notificationCenter=new NotificationCenter(this)),this.updateAdminLink()):(e.style.display="none",t.style.display="block",a&&(a.style.display="none"),this.removeAdminLink())}updateAdminLink(){if(this.currentUser&&this.currentUser.is_admin){const e=document.querySelector(".navbar-menu");if(e&&!document.querySelector(".navbar-menu .admin-nav-link")){const t=document.createElement("li");t.innerHTML='<a href="/admin" class="admin-nav-link">🛡️ Admin</a>',e.appendChild(t)}}}removeAdminLink(){const e=document.querySelector(".navbar-menu .admin-nav-link");e&&e.parentElement&&e.parentElement.remove()}navigateToPage(e,t=!0){document.querySelectorAll(".page").forEach(e=>e.classList.remove("active"));const n=document.getElementById(`${e}-page`);n&&(n.classList.add("active"),this.currentPage=e,document.querySelectorAll(".nav-link").forEach(t=>{t.classList.toggle("active",t.dataset.page===e)}),t&&history.pushState({page:e},"",`#${e}`),this.loadPageData(e))}async loadPageData(e){switch(e){case"dashboard":await this.loadDashboard();break;case"portfolio":await this.loadPortfolio();break;case"watchlist":await this.loadWatchlist();break;case"screener":await this.loadScreener();break;case"alerts":await this.loadAlerts();break;case"analysis":console.log("Analysis page ready for ticker input")}}async loadDashboard(){"undefined"!=typeof MarketIndicesWidget&&(this.marketIndicesWidget||(this.marketIndicesWidget=new MarketIndicesWidget),this.marketIndicesWidget.init("marketIndicesContainer")),this.currentUser?await Promise.all([this.refreshPortfolio(),this.refreshWatchlist(),this.refreshRecommendations(),this.refreshAlerts(),this.refreshNews()]):await Promise.all([this.refreshRecommendations(),this.refreshNews()])}async refreshPortfolio(){const e=document.getElementById("portfolioSummary");e.classList.add("loading");try{const t=await api.getPortfolio();this.displayPortfolioSummary(t.summary),t.items&&t.items.length>0&&this.initDashboardCharts(t),e.classList.remove("loading")}catch(t){this.showNotification("Failed to load portfolio","error"),e.classList.remove("loading")}}displayPortfolioSummary(e){document.getElementById("totalValue").textContent=`$${e.total_value?.toLocaleString()||"0"}`;const t=document.getElementById("dayPerformance");t.textContent=`${e.total_gain_loss_percent>0?"+":""}${e.total_gain_loss_percent?.toFixed(2)||"0"}%`,t.className="metric-value "+(e.total_gain_loss_percent>0?"positive":"negative");const n=document.getElementById("totalReturn");n.textContent=`$${e.total_gain_loss?.toLocaleString()||"0"}`,n.className="metric-value "+(e.total_gain_loss>0?"positive":"negative")}async refreshWatchlist(){const e=document.getElementById("watchlistItems");e.classList.add("loading");try{const t=await api.getWatchlist();if(this.displayWatchlistItems(t.items.slice(0,5)),e.classList.remove("loading"),this.websocketManager&&t.items.length>0){const e=t.items.map(e=>e.ticker);this.websocketManager.subscribe(e),console.log(`[App] Subscribed to real-time updates for watchlist: ${e.join(", ")}`)}}catch(t){e.classList.remove("loading")}}displayWatchlistItems(e){const t=document.getElementById("watchlistItems");0!==e.length?t.innerHTML=e.map(e=>`\n            <div class="watchlist-item">\n                <div class="watchlist-item-main clickable" onclick="app.navigateToAnalysis('${e.ticker}')" title="Klicken für Analyse von ${e.ticker}">\n                    <div class="watchlist-item-info">\n                        <div class="watchlist-item-ticker">${e.ticker}</div>\n                        <div class="watchlist-item-name">${e.company_name||""}</div>\n                    </div>\n                    <div class="watchlist-item-price">\n                        <div class="watchlist-item-current">$${e.current_price?.toFixed(2)||"-"}</div>\n                        <div class="watchlist-item-change ${e.price_change_percent>0?"positive":"negative"}">\n                            ${e.price_change_percent>0?"+":""}${e.price_change_percent?.toFixed(2)||"0"}%\n                        </div>\n                    </div>\n                </div>\n                <button class="btn-chart" onclick="event.stopPropagation(); app.openWatchlistChart('${e.ticker}')" title="Live-Chart für ${e.ticker}">\n                    📊 Chart\n                </button>\n                <button class="btn-ai-analyze" onclick="event.stopPropagation(); app.analyzeWithAI('${e.ticker}')" title="KI-Analyse für ${e.ticker}">\n                    <span class="ai-icon">🤖</span> KI\n                </button>\n            </div>\n        `).join(""):t.innerHTML='\n                <div class="empty-state">\n                    <div class="empty-state-icon">📊</div>\n                    <div class="empty-state-message">Keine Aktien in der Watchlist</div>\n                    <div class="empty-state-hint">Fügen Sie Aktien über die Analyse-Seite oder den Screener hinzu</div>\n                </div>\n            '}openWatchlistChart(e){const t=`\n            <div class="chart-modal-overlay" id="chartModal">\n                <div class="chart-modal-container">\n                    <div class="chart-modal-header">\n                        <div class="chart-modal-title">\n                            <h2>${e} Live-Chart</h2>\n                            <span class="chart-modal-subtitle">Interaktiver Chart mit Indikatoren</span>\n                        </div>\n                        <button class="chart-modal-close" onclick="app.closeWatchlistChart()">✕</button>\n                    </div>\n                    <div class="chart-modal-body">\n                        <div class="chart-controls">\n                            <div class="chart-controls-section">\n                                <label class="chart-control-label">Zeitraum:</label>\n                                <div class="chart-period-buttons">\n                                    <button class="chart-control-btn period-btn active" data-period="1mo" onclick="app.changeChartPeriod('1mo')">1M</button>\n                                    <button class="chart-control-btn period-btn" data-period="3mo" onclick="app.changeChartPeriod('3mo')">3M</button>\n                                    <button class="chart-control-btn period-btn" data-period="6mo" onclick="app.changeChartPeriod('6mo')">6M</button>\n                                    <button class="chart-control-btn period-btn" data-period="1y" onclick="app.changeChartPeriod('1y')">1J</button>\n                                </div>\n                            </div>\n                            <div class="chart-controls-section">\n                                <label class="chart-control-label">Indikatoren:</label>\n                                <div class="chart-indicator-buttons">\n                                    <button class="chart-control-btn indicator-btn" data-indicator="sma20" onclick="app.toggleChartIndicator('sma20')">SMA 20</button>\n                                    <button class="chart-control-btn indicator-btn" data-indicator="sma50" onclick="app.toggleChartIndicator('sma50')">SMA 50</button>\n                                    <button class="chart-control-btn indicator-btn" data-indicator="sma200" onclick="app.toggleChartIndicator('sma200')">SMA 200</button>\n                                    <button class="chart-control-btn indicator-btn" data-indicator="ema12" onclick="app.toggleChartIndicator('ema12')">EMA 12</button>\n                                    <button class="chart-control-btn indicator-btn" data-indicator="ema26" onclick="app.toggleChartIndicator('ema26')">EMA 26</button>\n                                    <button class="chart-control-btn indicator-btn" data-indicator="bb" onclick="app.toggleChartIndicator('bb')">Bollinger</button>\n                                </div>\n                            </div>\n                            <div class="chart-controls-section">\n                                <label class="chart-control-label">Zeichnen:</label>\n                                <button class="chart-control-btn drawing-btn" onclick="app.toggleChartDrawing()">📏 Trendlinie</button>\n                                <button class="chart-control-btn clear-btn" onclick="app.clearTrendlines()">🗑️ Löschen</button>\n                            </div>\n                        </div>\n                        <div class="chart-canvas-container">\n                            <canvas id="advancedChartCanvas"></canvas>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;document.body.insertAdjacentHTML("beforeend",t),this.currentAdvancedChart=new AdvancedChart("advancedChartCanvas",{candlestick:!1}),this.loadChartData(e,"1mo")}async loadChartData(e,t){this.currentChartTicker=e,this.currentChartPeriod=t;try{await this.currentAdvancedChart.loadData(e,t)}catch(e){console.error("Error loading chart data:",e),this.showNotification("Fehler beim Laden der Chart-Daten","error")}}changeChartPeriod(e){document.querySelectorAll(".period-btn").forEach(t=>{t.classList.remove("active"),t.dataset.period===e&&t.classList.add("active")}),this.loadChartData(this.currentChartTicker,e)}toggleChartIndicator(e){const t=document.querySelector(`[data-indicator="${e}"]`);this.currentAdvancedChart.toggleIndicator(e)?t.classList.add("active"):t.classList.remove("active")}toggleChartDrawing(){const e=document.querySelector(".drawing-btn");this.currentAdvancedChart.enableDrawing(),e.classList.add("active"),e.textContent="📏 Zeichnen aktiv"}clearTrendlines(){this.currentAdvancedChart.clearTrendlines();const e=document.querySelector(".drawing-btn");e.classList.remove("active"),e.textContent="📏 Trendlinie"}closeWatchlistChart(){const e=document.getElementById("chartModal");e&&e.remove(),this.currentAdvancedChart&&(this.currentAdvancedChart.destroy(),this.currentAdvancedChart=null)}async refreshRecommendations(){const e=document.getElementById("recommendationsList");e.classList.add("loading");try{const t=await api.getRecommendations();this.displayRecommendations(t.recommendations),e.classList.remove("loading")}catch(t){e.classList.remove("loading")}}displayRecommendations(e){document.getElementById("recommendationsList").innerHTML=[{key:"value_picks",title:"Value Picks"},{key:"growth_picks",title:"Growth Stocks"},{key:"dividend_picks",title:"Dividenden"}].map(t=>{const n=e[t.key]||[];return 0===n.length?"":`\n                <div class="recommendation-group">\n                    <div class="recommendation-title">${t.title}</div>\n                    ${n.map(e=>`\n                        <div class="recommendation-card">\n                            <div class="recommendation-info">\n                                <span class="recommendation-ticker">${e.ticker}</span>\n                                <div class="recommendation-metrics">\n                                    ${e.pe_ratio?`<span class="recommendation-metric">P/E: ${e.pe_ratio.toFixed(1)}</span>`:""}\n                                    ${e.dividend_yield?`<span class="recommendation-metric">Div: ${(100*e.dividend_yield).toFixed(2)}%</span>`:""}\n                                </div>\n                            </div>\n                            <span class="recommendation-score">${e.score?.toFixed(0)||"-"}</span>\n                        </div>\n                    `).join("")}\n                </div>\n            `}).join("")}async refreshAIRecommendations(){if(!this.currentUser)return void this.showNotification("Bitte melden Sie sich an","error");const e=document.getElementById("aiRecommendationsContent"),t=document.getElementById("aiRefreshBtn"),n=document.getElementById("aiRefreshIcon"),a=document.getElementById("aiRefreshText");t.disabled=!0,n.classList.add("spinning"),a.textContent="Analysiere...",e.innerHTML='\n            <div class="ai-recs-loading">\n                <div class="loading-spinner"></div>\n                <p>KI analysiert den Markt...</p>\n                <p class="loading-note">Dies kann einige Minuten dauern</p>\n            </div>\n        ';try{const e=await api.getAIRecommendations();this.displayAIRecommendations(e),this.showNotification("KI-Analyse abgeschlossen","success")}catch(t){e.innerHTML=`\n                <div class="ai-recs-error">\n                    <div class="error-icon">⚠️</div>\n                    <p>Fehler bei der KI-Analyse</p>\n                    <p class="error-note">${t.message||"Bitte versuchen Sie es später erneut"}</p>\n                </div>\n            `,this.showNotification("KI-Analyse fehlgeschlagen","error")}finally{t.disabled=!1,n.classList.remove("spinning"),a.textContent="Aktualisieren"}}displayAIRecommendations(e){const t=document.getElementById("aiRecommendationsContent"),{top_buys:n,top_sells:a,analyzed_count:s,timestamp:i}=e;n&&0!==n.length?t.innerHTML=`\n            <div class="ai-recs-header">\n                <div class="ai-recs-info">\n                    <span class="ai-recs-count">📊 ${s} Aktien analysiert</span>\n                    <span class="ai-recs-time">⏱️ ${new Date(i).toLocaleString("de-DE")}</span>\n                </div>\n            </div>\n\n            <div class="ai-recs-grid">\n                \x3c!-- Top Buys --\x3e\n                <div class="ai-recs-section">\n                    <div class="ai-recs-section-header buy">\n                        <h4>🚀 Top 10 Kaufempfehlungen</h4>\n                    </div>\n                    <div class="ai-recs-list">\n                        ${n.map((e,t)=>this.createAIRecommendationCard(e,t+1,"buy")).join("")}\n                    </div>\n                </div>\n\n                \x3c!-- Top Sells --\x3e\n                ${a&&a.length>0?`\n                <div class="ai-recs-section">\n                    <div class="ai-recs-section-header sell">\n                        <h4>⚠️ Top 10 Verkaufsempfehlungen</h4>\n                    </div>\n                    <div class="ai-recs-list">\n                        ${a.map((e,t)=>this.createAIRecommendationCard(e,t+1,"sell")).join("")}\n                    </div>\n                </div>\n                `:""}\n            </div>\n        `:t.innerHTML=`\n                <div class="ai-recs-empty">\n                    <div class="error-icon">⚠️</div>\n                    <p><strong>Keine Kaufempfehlungen verfügbar</strong></p>\n                    <p class="error-note">Mögliche Gründe:</p>\n                    <ul class="error-reasons">\n                        <li><strong>API-Limit erreicht:</strong> Alpha Vantage erlaubt nur 25 Anfragen pro Tag im kostenlosen Plan</li>\n                        <li><strong>Finnhub/Twelve Data Schlüssel fehlen:</strong> Fügen Sie FINNHUB_API_KEY und TWELVE_DATA_API_KEY zur .env Datei hinzu</li>\n                        <li><strong>Keine BUY-Empfehlungen:</strong> KI hat keine Kaufempfehlungen gefunden</li>\n                    </ul>\n                    <p class="error-note"><strong>Analysierte Aktien:</strong> ${s||0}</p>\n                    <p class="error-note">💡 <strong>Tipp:</strong> Warten Sie bis morgen oder fügen Sie weitere API-Schlüssel hinzu</p>\n                </div>\n            `}createAIRecommendationCard(e,t,n){const a="buy"===n?"badge-success":"badge-danger",s="US"===e.market?"🇺🇸 US":"🇩🇪 DE";return`\n            <div class="ai-rec-card ${n}" onclick="app.showStockDetails('${e.ticker}')">\n                <div class="ai-rec-rank">#${t}</div>\n                <div class="ai-rec-main">\n                    <div class="ai-rec-header">\n                        <div class="ai-rec-ticker-group">\n                            <span class="ai-rec-ticker">${e.ticker}</span>\n                            <span class="ai-rec-market-badge">${s}</span>\n                        </div>\n                        <span class="ai-rec-price">$${e.current_price?.toFixed(2)||"-"}</span>\n                    </div>\n                    <div class="ai-rec-company">${e.company_name}</div>\n                    ${e.summary?`<div class="ai-rec-summary">${e.summary}</div>`:""}\n                    <div class="ai-rec-metrics">\n                        <span class="ai-rec-badge ${a}">${"buy"===n?"KAUFEN":"VERKAUFEN"}</span>\n                        <span class="ai-rec-confidence">\n                            <span class="confidence-bar" style="--confidence: ${e.confidence}%">\n                                <span class="confidence-fill"></span>\n                            </span>\n                            <span class="confidence-text">${e.confidence}% Vertrauen</span>\n                        </span>\n                        <span class="ai-rec-score">Score: ${e.overall_score?.toFixed(0)||"-"}</span>\n                    </div>\n                </div>\n            </div>\n        `}navigateToAnalysis(e){e?(this.navigateToPage("analysis"),document.getElementById("stockSearch").value=e.toUpperCase(),this.analyzeStock()):this.showNotification("Kein Ticker angegeben","error")}async analyzeWithAI(e){if(e)if(this.currentUser)try{this.navigateToPage("analysis"),document.getElementById("stockSearch").value=e.toUpperCase(),await this.analyzeStock(),setTimeout(()=>{const t=document.querySelector('[data-tab="ai"]');t&&(t.click(),this.showNotification(`KI-Analyse wird geladen für ${e}...`,"info"))},1e3)}catch(e){console.error("[App] Error in analyzeWithAI:",e),this.showNotification("Fehler bei KI-Analyse","error")}else this.showNotification("Bitte melden Sie sich an für KI-Analyse","warning");else this.showNotification("Kein Ticker angegeben","error")}showStockDetails(e){this.navigateToAnalysis(e)}async refreshAlerts(){const e=document.getElementById("activeAlerts");e.classList.add("loading");try{const t=(await api.getAlerts(!0)).alerts.filter(e=>e.is_active&&!e.is_triggered);document.getElementById("alertCount").textContent=t.length,this.displayActiveAlerts(t.slice(0,5)),e.classList.remove("loading")}catch(t){e.classList.remove("loading")}}displayActiveAlerts(e){const t=document.getElementById("activeAlerts");0!==e.length?t.innerHTML=e.map(e=>`\n            <div class="alert-item ${e.is_triggered?"triggered":""}">\n                <div class="alert-info">\n                    <div class="alert-ticker">${e.ticker}</div>\n                    <div class="alert-condition">\n                        ${e.alert_type.replace("_"," ")} $${e.target_value.toFixed(2)}\n                    </div>\n                </div>\n                <div class="alert-actions">\n                    <button class="btn-icon" onclick="app.editAlert(${e.id})">✏️</button>\n                    <button class="btn-icon" onclick="app.deleteAlert(${e.id})">🗑️</button>\n                </div>\n            </div>\n        `).join(""):t.innerHTML='\n                <div class="empty-state">\n                    <div class="empty-state-icon">🔔</div>\n                    <div class="empty-state-message">Keine aktiven Alerts</div>\n                    <div class="empty-state-hint">Erstellen Sie Alerts auf der Alerts-Seite</div>\n                </div>\n            '}async analyzeStock(){console.log("analyzeStock called");const e=document.getElementById("stockSearch").value.trim();if(console.log("Ticker:",e),!e)return void this.showNotification("Bitte geben Sie ein Symbol ein","error");const t=document.getElementById("analysisResult");if(!t)return console.error("analysisResult element not found!"),void this.showNotification("UI Fehler: Result container nicht gefunden","error");t.style.display="block",t.classList.add("loading");try{console.log("Fetching stock data...");const[n,a]=await Promise.all([api.getStock(e),this.currentUser?api.analyzeWithAI(e):Promise.resolve(null)]);if(console.log("Stock data received:",n.ticker),console.log("AI analysis:",a?"Present":"Not requested"),t.classList.remove("loading"),this.displayStockAnalysis(n,a),this.websocketManager&&n.ticker){const e=n.ticker.toUpperCase();this.currentAnalysisTicker&&this.currentAnalysisTicker!==e&&(this.websocketManager.unsubscribe([this.currentAnalysisTicker]),console.log(`[App] Unsubscribed from ${this.currentAnalysisTicker}`)),this.websocketManager.subscribe([e]),console.log(`[App] Subscribed to real-time updates for ${e}`)}}catch(e){console.error("analyzeStock error:",e),t.classList.remove("loading"),this.showNotification(`Analyse fehlgeschlagen: ${e.message}`,"error"),t.style.display="none"}}displayStockAnalysis(e,t){this.currentAnalysisTicker=e.ticker,this.currentStockPrice=e.info.current_price,this.currentStockData=e,this.currentTechnicalData=e,document.getElementById("stockName").textContent=`${e.info.ticker} - ${e.info.company_name}`;const n=document.getElementById("stockPrice"),a=(e.info.current_price-e.info.previous_close)/e.info.previous_close*100;n.innerHTML=`\n            <span class="price-current">$${e.info.current_price?.toFixed(2)||"-"}</span>\n            <span class="price-change ${a>0?"positive":"negative"}">\n                ${a>0?"+":""}${a.toFixed(2)}%\n            </span>\n        `,document.getElementById("overview-tab").innerHTML=this.createOverviewContent(e.info),setTimeout(()=>{const e=document.getElementById("addToWatchlistBtn");e&&e.addEventListener("click",()=>this.addToWatchlistFromAnalysis())},100),e.technical_indicators&&(document.getElementById("technical-tab").innerHTML=this.createTechnicalContent(e.technical_indicators)),e.fundamental_analysis&&(document.getElementById("fundamental-tab").innerHTML=this.createFundamentalContent(e.fundamental_analysis)),t&&t.ai_analysis&&(document.getElementById("ai-tab").innerHTML=this.createAIContent(t.ai_analysis)),this.loadPriceChart(e.ticker,this.currentPeriod),this.restoreLastAnalysisTab()}restoreLastAnalysisTab(){const e=localStorage.getItem("lastAnalysisTab");if(e){const t=document.querySelector(`[data-analysis-tab="${e}"]`);t&&t.click()}}createOverviewContent(e){return`\n            <div class="overview-header-actions">\n                <button id="addToWatchlistBtn" class="btn btn-primary watchlist-add-btn">\n                    <span class="btn-icon">⭐</span>\n                    Zur Watchlist hinzufügen\n                </button>\n            </div>\n            <div class="metrics-grid">\n                <div class="metric-item">\n                    <span class="metric-label">Market Cap</span>\n                    <span class="metric-value">${e.market_cap?"$"+e.market_cap.toFixed(2)+"B":"N/A"}</span>\n                </div>\n                <div class="metric-item">\n                    <span class="metric-label">Aktueller Kurs</span>\n                    <span class="metric-value">$${e.current_price?.toFixed(2)||"N/A"}</span>\n                </div>\n                <div class="metric-item">\n                    <span class="metric-label">Tages-Hoch</span>\n                    <span class="metric-value">$${e.day_high?.toFixed(2)||"N/A"}</span>\n                </div>\n                <div class="metric-item">\n                    <span class="metric-label">Tages-Tief</span>\n                    <span class="metric-value">$${e.day_low?.toFixed(2)||"N/A"}</span>\n                </div>\n                <div class="metric-item">\n                    <span class="metric-label">Eröffnung</span>\n                    <span class="metric-value">$${e.open?.toFixed(2)||"N/A"}</span>\n                </div>\n                <div class="metric-item">\n                    <span class="metric-label">Vortagesschluss</span>\n                    <span class="metric-value">$${e.previous_close?.toFixed(2)||"N/A"}</span>\n                </div>\n                <div class="metric-item">\n                    <span class="metric-label">Börse</span>\n                    <span class="metric-value">${e.exchange||"N/A"}</span>\n                </div>\n                <div class="metric-item">\n                    <span class="metric-label">Sektor</span>\n                    <span class="metric-value">${e.sector||"N/A"}</span>\n                </div>\n            </div>\n            <div class="description">\n                <h4>Über das Unternehmen</h4>\n                <div class="company-info">\n                    <div class="info-row">\n                        <span class="info-label">Name:</span>\n                        <span class="info-value">${e.company_name||"N/A"}</span>\n                    </div>\n                    <div class="info-row">\n                        <span class="info-label">Industrie:</span>\n                        <span class="info-value">${e.industry||"N/A"}</span>\n                    </div>\n                    <div class="info-row">\n                        <span class="info-label">Land:</span>\n                        <span class="info-value">${e.country||"N/A"}</span>\n                    </div>\n                    <div class="info-row">\n                        <span class="info-label">Währung:</span>\n                        <span class="info-value">${e.currency||"USD"}</span>\n                    </div>\n                    ${e.website?`\n                    <div class="info-row">\n                        <span class="info-label">Website:</span>\n                        <span class="info-value"><a href="${e.website}" target="_blank" rel="noopener">${e.website}</a></span>\n                    </div>\n                    `:""}\n                    ${e.logo?`\n                    <div class="company-logo">\n                        <img src="${e.logo}" alt="${e.company_name} Logo" onerror="this.style.display='none'">\n                    </div>\n                    `:""}\n                </div>\n            </div>\n        `}createTechnicalContent(e){return this.currentTechnicalData=e,`\n            <div class="technical-analysis-container">\n                \x3c!-- Visual Indicators --\x3e\n                <div class="technical-charts-grid">\n                    <div class="tech-chart-card">\n                        <h4>📊 RSI (Relative Strength Index)</h4>\n                        <canvas id="rsiGaugeChart"></canvas>\n                        <div class="indicator-status">\n                            <span class="status-label">Status:</span>\n                            <span class="status-value ${this.getRSIStatus(e.rsi).class}">\n                                ${this.getRSIStatus(e.rsi).text}\n                            </span>\n                        </div>\n                    </div>\n\n                    <div class="tech-chart-card">\n                        <h4>📈 MACD</h4>\n                        <canvas id="macdChart"></canvas>\n                        <div class="indicator-status">\n                            <span class="status-label">Signal:</span>\n                            <span class="status-value ${e.macd?.macd>0?"bullish":"bearish"}">\n                                ${e.macd?.macd>0?"Bullisch":"Bärisch"}\n                            </span>\n                        </div>\n                    </div>\n\n                    <div class="tech-chart-card">\n                        <h4>📉 Bollinger Bands Position</h4>\n                        <canvas id="bollingerChart"></canvas>\n                        <div class="indicator-status">\n                            <span class="status-label">Position:</span>\n                            <span class="status-value">${(100*e.bollinger_bands?.current_position)?.toFixed(1)||"N/A"}%</span>\n                        </div>\n                    </div>\n\n                    <div class="tech-chart-card">\n                        <h4>⚡ Volatilität</h4>\n                        <canvas id="volatilityChart"></canvas>\n                        <div class="indicator-status">\n                            <span class="status-label">Level:</span>\n                            <span class="status-value ${e.volatility>.5?"high":"normal"}">\n                                ${e.volatility>.5?"Hoch":"Normal"} (${(100*e.volatility)?.toFixed(1)}%)\n                            </span>\n                        </div>\n                    </div>\n                </div>\n\n                \x3c!-- Moving Averages Comparison --\x3e\n                <div class="tech-chart-card full-width">\n                    <h4>📊 Moving Averages Vergleich</h4>\n                    <canvas id="movingAveragesChart"></canvas>\n                </div>\n\n                \x3c!-- Price Changes --\x3e\n                <div class="price-changes-grid">\n                    <div class="price-change-card">\n                        <div class="pc-label">1 Tag</div>\n                        <div class="pc-value ${e.price_change_1d>0?"positive":"negative"}">\n                            ${e.price_change_1d>0?"+":""}${e.price_change_1d?.toFixed(2)||"N/A"}%\n                        </div>\n                    </div>\n                    <div class="price-change-card">\n                        <div class="pc-label">1 Woche</div>\n                        <div class="pc-value ${e.price_change_1w>0?"positive":"negative"}">\n                            ${e.price_change_1w>0?"+":""}${e.price_change_1w?.toFixed(2)||"N/A"}%\n                        </div>\n                    </div>\n                    <div class="price-change-card">\n                        <div class="pc-label">1 Monat</div>\n                        <div class="pc-value ${e.price_change_1m>0?"positive":"negative"}">\n                            ${e.price_change_1m>0?"+":""}${e.price_change_1m?.toFixed(2)||"N/A"}%\n                        </div>\n                    </div>\n                    <div class="price-change-card">\n                        <div class="pc-label">Volumen Trend</div>\n                        <div class="pc-value">${e.volume_trend||"Normal"}</div>\n                    </div>\n                </div>\n            </div>\n        `}getRSIStatus(e){return e?e>70?{text:"Überkauft",class:"overbought"}:e<30?{text:"Überverkauft",class:"oversold"}:{text:"Neutral",class:"neutral"}:{text:"N/A",class:""}}initTechnicalCharts(e){e?(console.log("[Technical] Initializing technical charts with data:",e),setTimeout(()=>{try{void 0!==e.rsi&&null!==e.rsi?this.createRSIGaugeChart(e.rsi):console.warn("[Technical] RSI data missing"),e.macd?this.createMACDChart(e.macd):console.warn("[Technical] MACD data missing"),e.bollinger_bands?this.createBollingerChart(e.bollinger_bands):console.warn("[Technical] Bollinger Bands data missing"),void 0!==e.volatility&&null!==e.volatility?this.createVolatilityChart(e.volatility):console.warn("[Technical] Volatility data missing"),this.createMovingAveragesChart(e),console.log("[Technical] All charts initialized successfully")}catch(e){console.error("[Technical] Error initializing charts:",e)}},150)):console.warn("[Technical] No technical data available")}createRSIGaugeChart(e){const t=document.getElementById("rsiGaugeChart");if(!t)return void console.warn("[Technical] RSI canvas not found");const n=t.getContext("2d");if(!n)return void console.error("[Technical] Could not get 2D context for RSI chart");this.rsiChart&&this.rsiChart.destroy();const a=null!=e?e:50;console.log("[Technical] Creating RSI chart with value:",a),this.rsiChart=new Chart(n,{type:"doughnut",data:{datasets:[{data:[a,100-a],backgroundColor:[a>70?"#ef4444":a<30?"#10b981":"#3b82f6","#1f2937"],borderWidth:0}]},options:{responsive:!0,maintainAspectRatio:!0,cutout:"75%",plugins:{legend:{display:!1},tooltip:{enabled:!1}}},plugins:[{id:"centerText",afterDraw:e=>{const t=e.width,n=e.height,s=e.ctx;s.restore();const i=(n/114).toFixed(2);s.font=i+"em sans-serif",s.textBaseline="middle",s.fillStyle="#fff";const r=a.toFixed(1),o=Math.round((t-s.measureText(r).width)/2),c=n/2;s.fillText(r,o,c),s.save()}}]})}createMACDChart(e){const t=document.getElementById("macdChart");if(!t||!e)return;const n=t.getContext("2d");this.macdChart&&this.macdChart.destroy(),this.macdChart=new Chart(n,{type:"bar",data:{labels:["MACD","Signal","Histogram"],datasets:[{data:[e.macd||0,e.signal||0,e.histogram||0],backgroundColor:[e.macd>0?"#10b981":"#ef4444","#3b82f6",e.histogram>0?"#10b981":"#ef4444"]}]},options:{responsive:!0,maintainAspectRatio:!0,plugins:{legend:{display:!1}},scales:{y:{beginAtZero:!0,ticks:{color:"#9ca3af"},grid:{color:"#374151"}},x:{ticks:{color:"#9ca3af"},grid:{display:!1}}}}})}createBollingerChart(e){const t=document.getElementById("bollingerChart");if(!t||!e)return;const n=t.getContext("2d");this.bollingerChart&&this.bollingerChart.destroy();const a=e.current_position||.5;this.bollingerChart=new Chart(n,{type:"bar",data:{labels:["Position in Band"],datasets:[{label:"Unteres Band",data:[0],backgroundColor:"#ef4444"},{label:"Aktuelle Position",data:[a],backgroundColor:"#3b82f6"},{label:"Oberes Band",data:[1-a],backgroundColor:"#10b981"}]},options:{indexAxis:"y",responsive:!0,maintainAspectRatio:!0,scales:{x:{stacked:!0,max:1,ticks:{color:"#9ca3af",callback:e=>100*e+"%"},grid:{color:"#374151"}},y:{stacked:!0,ticks:{color:"#9ca3af"},grid:{display:!1}}},plugins:{legend:{display:!0,labels:{color:"#d1d5db"}}}}})}createVolatilityChart(e){const t=document.getElementById("volatilityChart");if(!t)return;const n=t.getContext("2d");this.volatilityChart&&this.volatilityChart.destroy();const a=100*(e||0);this.volatilityChart=new Chart(n,{type:"doughnut",data:{datasets:[{data:[a,100-a],backgroundColor:[a>50?"#ef4444":"#3b82f6","#1f2937"],borderWidth:0}]},options:{responsive:!0,maintainAspectRatio:!0,cutout:"75%",plugins:{legend:{display:!1},tooltip:{enabled:!1}}},plugins:[{id:"centerText",afterDraw:e=>{const t=e.width,n=e.height,s=e.ctx;s.restore();const i=(n/114).toFixed(2);s.font=i+"em sans-serif",s.textBaseline="middle",s.fillStyle="#fff";const r=a.toFixed(1)+"%",o=Math.round((t-s.measureText(r).width)/2),c=n/2;s.fillText(r,o,c),s.save()}}]})}createMovingAveragesChart(e){const t=document.getElementById("movingAveragesChart");if(!t)return;const n=t.getContext("2d");this.movingAveragesChart&&this.movingAveragesChart.destroy(),this.movingAveragesChart=new Chart(n,{type:"bar",data:{labels:["SMA 20","SMA 50","EMA 12","EMA 26"],datasets:[{label:"Moving Averages",data:[e.sma_20||0,e.sma_50||0,e.ema_12||0,e.ema_26||0],backgroundColor:["#3b82f6","#8b5cf6","#10b981","#f59e0b"]}]},options:{responsive:!0,maintainAspectRatio:!0,plugins:{legend:{display:!1}},scales:{y:{beginAtZero:!1,ticks:{color:"#9ca3af",callback:e=>"$"+e.toFixed(2)},grid:{color:"#374151"}},x:{ticks:{color:"#9ca3af"},grid:{display:!1}}}}})}createFundamentalContent(e){return`\n            <div class="fundamental-scores">\n                <div class="score-item">\n                    <span class="score-label">Gesamt-Score</span>\n                    <span class="score-value">${e.overall_score}/100</span>\n                </div>\n                <div class="score-item">\n                    <span class="score-label">Empfehlung</span>\n                    <span class="score-value">${e.recommendation}</span>\n                </div>\n            </div>\n        `}createAIContent(e){return`\n            <div class="ai-analysis">\n                ${e.summary?`<div class="ai-section"><h4>Zusammenfassung</h4><p>${e.summary}</p></div>`:""}\n                ${e.technical_analysis?`<div class="ai-section"><h4>Technische Analyse</h4><p>${e.technical_analysis}</p></div>`:""}\n                ${e.risks?`<div class="ai-section"><h4>Risiken</h4><p>${e.risks}</p></div>`:""}\n                ${e.opportunities?`<div class="ai-section"><h4>Chancen</h4><p>${e.opportunities}</p></div>`:""}\n            </div>\n        `}switchAnalysisTab(e){document.querySelectorAll(".tab-pane").forEach(e=>{e.classList.remove("active")}),document.getElementById(`${e}-tab`).classList.add("active"),localStorage.setItem("lastAnalysisTab",e),"ai"===e&&this.currentAnalysisTicker&&this.aiVisualizer.renderAnalysis(this.currentAnalysisTicker,this.currentStockPrice),"technical"===e&&this.currentTechnicalData&&setTimeout(()=>{this.initTechnicalCharts(this.currentTechnicalData)},100),"news"===e&&this.currentAnalysisTicker&&(this.newsLoaded||(this.loadNewsTab(this.currentAnalysisTicker),this.newsLoaded=!0)),"compare"===e&&this.currentAnalysisTicker&&(document.getElementById("compareTicker1").value=this.currentAnalysisTicker)}async loadNewsTab(e){const t=document.getElementById("stockNewsContainer");t.innerHTML='<div class="loading-news">Lade Nachrichten...</div>';try{const t=await api.getStockNews(e,15,7);this.currentNewsData=t,this.displayStockNews(t.news,"all"),this.setupNewsFilters(t.news)}catch(e){console.error("Error loading news:",e),t.innerHTML='<div class="error-news">Fehler beim Laden der Nachrichten</div>'}}setupNewsFilters(e){const t=document.querySelectorAll(".news-filters .filter-btn");t.forEach(n=>{n.addEventListener("click",()=>{t.forEach(e=>e.classList.remove("active")),n.classList.add("active");const a=n.dataset.filter;this.displayStockNews(e,a)})})}displayStockNews(e,t="all"){const n=document.getElementById("stockNewsContainer");let a=e;"all"!==t&&(a=e.filter(e=>e.sentiment.toLowerCase()===t.toLowerCase())),0!==a.length?n.innerHTML=a.map(e=>this.createNewsCard(e)).join(""):n.innerHTML='<div class="no-news">Keine Nachrichten gefunden</div>'}createNewsCard(e){const t={bullish:"sentiment-bullish",neutral:"sentiment-neutral",bearish:"sentiment-bearish"}[e.sentiment.toLowerCase()]||"sentiment-neutral",n={bullish:"🟢",neutral:"⚪",bearish:"🔴"}[e.sentiment.toLowerCase()]||"⚪",a=this.formatNewsDate(e.date),s=e.image?`<img src="${e.image}" alt="News thumbnail" class="news-thumbnail">`:"";return`\n            <div class="stock-news-card" onclick="window.open('${e.url}', '_blank')">\n                ${s}\n                <div class="news-card-content">\n                    <div class="news-card-header">\n                        <span class="sentiment-badge ${t}">\n                            ${n} ${e.sentiment}\n                        </span>\n                        <span class="news-source">${e.source}</span>\n                    </div>\n                    <h4 class="news-headline">${e.headline}</h4>\n                    ${e.summary?`<p class="news-summary">${e.summary}</p>`:""}\n                    <div class="news-meta">\n                        <span class="news-time">${a}</span>\n                    </div>\n                </div>\n            </div>\n        `}formatNewsDate(e){const t=new Date(e),n=new Date-t,a=Math.floor(n/36e5),s=Math.floor(n/864e5);return a<1?"vor kurzem":a<24?`vor ${a} Std`:s<7?`vor ${s} Tag${s>1?"en":""}`:t.toLocaleDateString("de-DE")}async loadScreener(){await this.loadPresetStrategies()}async loadPresetStrategies(){try{const e=await api.getScreenerPresets();document.getElementById("presetStrategies").innerHTML=e.presets.map(e=>`\n                <button class="preset-btn" onclick="app.applyPreset('${e.name.toLowerCase().replace(" ","_")}')">\n                    ${e.name}\n                </button>\n            `).join("")}catch(e){console.error("Failed to load presets:",e)}}async applyPreset(e){const t=document.getElementById("screenerResults");t.classList.add("loading");try{const n=await api.applyPresetScreen(e);t.classList.remove("loading"),this.displayScreenerResults(n.results),document.getElementById("resultCount").textContent=`(${n.count})`}catch(e){t.classList.remove("loading"),this.showNotification("Preset konnte nicht angewendet werden","error")}}async runScreener(){const e={market:document.getElementById("marketFilter").value,min_market_cap:parseFloat(document.getElementById("minMarketCap").value)||void 0,min_pe_ratio:parseFloat(document.getElementById("minPE").value)||void 0,max_pe_ratio:parseFloat(document.getElementById("maxPE").value)||void 0,min_dividend_yield:parseFloat(document.getElementById("minDividend").value)/100||void 0,prefer_value:document.getElementById("preferValue").checked,prefer_growth:document.getElementById("preferGrowth").checked,prefer_dividends:document.getElementById("preferDividends").checked,prefer_momentum:document.getElementById("preferMomentum").checked},t=document.getElementById("screenerResults");t.classList.add("loading");try{const n=await api.screenStocks(e);t.classList.remove("loading"),this.displayScreenerResults(n.results),document.getElementById("resultCount").textContent=`(${n.count})`}catch(e){t.classList.remove("loading"),this.showNotification("Screening fehlgeschlagen","error")}}displayScreenerResults(e){const t=document.getElementById("screenerTableBody");0!==e.length?t.innerHTML=e.map(e=>`\n            <tr>\n                <td><strong>${e.ticker}</strong></td>\n                <td>${e.company_name}</td>\n                <td>$${e.current_price?.toFixed(2)||"-"}</td>\n                <td>$${(e.market_cap/1e9).toFixed(2)}B</td>\n                <td>${e.pe_ratio?.toFixed(2)||"-"}</td>\n                <td>${e.dividend_yield?(100*e.dividend_yield).toFixed(2)+"%":"-"}</td>\n                <td>${e.score?.toFixed(0)||"-"}</td>\n                <td>\n                    <button class="btn btn-sm btn-primary" onclick="app.addToWatchlistFromScreener('${e.ticker}')">\n                        + Watchlist\n                    </button>\n                </td>\n            </tr>\n        `).join(""):t.innerHTML='\n                <tr>\n                    <td colspan="8">\n                        <div class="empty-state">\n                            <div class="empty-state-icon">🔍</div>\n                            <div class="empty-state-message">Keine Ergebnisse gefunden</div>\n                            <div class="empty-state-hint">Passen Sie Ihre Filterkriterien an oder versuchen Sie ein Preset</div>\n                        </div>\n                    </td>\n                </tr>\n            '}resetScreener(){document.getElementById("screenerForm").reset(),document.getElementById("screenerTableBody").innerHTML="",document.getElementById("resultCount").textContent=""}async loadPortfolio(){if(!this.currentUser)return void this.showNotification("Bitte melden Sie sich an","error");document.getElementById("portfolioDetailSummary");const e=document.getElementById("portfolioTableBody");if(e){e.innerHTML='<tr><td colspan="7" style="text-align: center;"><div class="spinner"></div> Lade Portfolio...</td></tr>';try{console.log("[Portfolio] Fetching portfolio data...");const e=await api.getPortfolio();if(console.log("[Portfolio] Data received:",e),!e||"object"!=typeof e)throw new Error("Invalid portfolio response");e.items&&Array.isArray(e.items)||(console.warn("[Portfolio] No items array in response, using empty array"),e.items=[]),e.summary&&"object"==typeof e.summary||(console.warn("[Portfolio] No summary in response, using defaults"),e.summary={total_value:0,total_invested:0,total_gain_loss:0,total_gain_loss_percent:0,positions:0}),console.log(`[Portfolio] Displaying ${e.items.length} items`),this.displayPortfolioDetails(e)}catch(t){console.error("[Portfolio] Error loading portfolio:",t),e.innerHTML=`\n                <tr>\n                    <td colspan="7">\n                        <div class="error-state" style="text-align: center; padding: 20px; color: var(--error-color);">\n                            <div style="font-size: 48px; margin-bottom: 10px;">⚠️</div>\n                            <div style="font-weight: bold; margin-bottom: 5px;">Fehler beim Laden des Portfolios</div>\n                            <div style="font-size: 14px; opacity: 0.8;">${t.message||"Unbekannter Fehler"}</div>\n                            <button class="btn btn-primary" onclick="app.loadPortfolio()" style="margin-top: 15px;">🔄 Erneut versuchen</button>\n                        </div>\n                    </td>\n                </tr>\n            `,this.showNotification("Portfolio konnte nicht geladen werden","error")}}else console.error("Portfolio table body not found")}displayPortfolioDetails(e){console.log("[displayPortfolioDetails] Starting display with data:",e);const t=e.summary||{},n=document.getElementById("portfolioDetailSummary");n?(console.log("[displayPortfolioDetails] Rendering summary"),n.innerHTML=`\n                <div class="portfolio-metrics">\n                    <div class="portfolio-metric">\n                        <div class="portfolio-metric-label">Gesamtwert</div>\n                        <div class="portfolio-metric-value">$${(t.total_value||0).toLocaleString("en-US",{minimumFractionDigits:2,maximumFractionDigits:2})}</div>\n                    </div>\n                    <div class="portfolio-metric">\n                        <div class="portfolio-metric-label">Investiert</div>\n                        <div class="portfolio-metric-value">$${(t.total_invested||0).toLocaleString("en-US",{minimumFractionDigits:2,maximumFractionDigits:2})}</div>\n                    </div>\n                    <div class="portfolio-metric">\n                        <div class="portfolio-metric-label">Gewinn/Verlust</div>\n                        <div class="portfolio-metric-value ${(t.total_gain_loss||0)>=0?"positive":"negative"}">\n                            $${(t.total_gain_loss||0).toLocaleString("en-US",{minimumFractionDigits:2,maximumFractionDigits:2})}\n                            (${(t.total_gain_loss_percent||0).toFixed(2)}%)\n                        </div>\n                    </div>\n                    <div class="portfolio-metric">\n                        <div class="portfolio-metric-label">Positionen</div>\n                        <div class="portfolio-metric-value">${t.positions||0}</div>\n                    </div>\n                </div>\n                <div class="export-actions">\n                    <button class="export-btn" onclick="app.exportPortfolio()">\n                        📥 Export as CSV\n                    </button>\n                </div>\n            `):console.warn("[displayPortfolioDetails] Summary container not found");const a=document.getElementById("portfolioTableBody");if(!a)return void console.error("[displayPortfolioDetails] Table body not found!");const s=e.items||[];if(console.log(`[displayPortfolioDetails] Rendering ${s.length} holdings`),0===s.length)return void(a.innerHTML='\n                <tr>\n                    <td colspan="7">\n                        <div class="empty-state">\n                            <div class="empty-state-icon">💼</div>\n                            <div class="empty-state-message">Keine Positionen im Portfolio</div>\n                            <div class="empty-state-hint">Fügen Sie Transaktionen hinzu, um Ihr Portfolio zu beginnen</div>\n                            <button class="btn btn-primary" onclick="app.showAddTransaction()" style="margin-top: 15px;">+ Transaktion hinzufügen</button>\n                        </div>\n                    </td>\n                </tr>\n            ');const i=s.map(e=>{try{const t=e.ticker||"N/A",n=e.company_name||t,a=(e.shares||0).toFixed(2),s=e.current_price?`$${e.current_price.toFixed(2)}`:"-",i=e.current_value?`$${e.current_value.toFixed(2)}`:"-",r=e.gain_loss_percent||0;return`\n                    <tr class="clickable" onclick="app.navigateToAnalysis('${t}')" style="cursor: pointer;" title="Klicken für Analyse von ${t}">\n                        <td><strong>${t}</strong></td>\n                        <td>${n}</td>\n                        <td>${a}</td>\n                        <td>${s}</td>\n                        <td>${i}</td>\n                        <td class="${r>=0?"positive":"negative"}">\n                            ${r>=0?"+":""}${r.toFixed(2)}%\n                        </td>\n                        <td onclick="event.stopPropagation()">\n                            <button class="btn-icon" onclick="app.sellPosition('${t}')">Verkaufen</button>\n                        </td>\n                    </tr>\n                `}catch(t){return console.error("[displayPortfolioDetails] Error rendering item:",e,t),""}}).filter(e=>""!==e).join("");a.innerHTML=i,console.log("[displayPortfolioDetails] Holdings table rendered successfully")}async loadWatchlist(){if(this.currentUser)try{const e=await api.getWatchlist();this.displayFullWatchlist(e.items)}catch(e){this.showNotification("Watchlist konnte nicht geladen werden","error")}else this.showNotification("Bitte melden Sie sich an","error")}displayFullWatchlist(e){const t=document.getElementById("watchlistGrid");0!==e.length?t.innerHTML=e.map(e=>`\n            <div class="watchlist-card card clickable" onclick="app.navigateToAnalysis('${e.ticker}')" title="Klicken für Analyse von ${e.ticker}">\n                <h3>${e.ticker}</h3>\n                <p>${e.company_name}</p>\n                <div class="price-info">\n                    <span class="current-price">$${e.current_price?.toFixed(2)||"-"}</span>\n                    <span class="price-change ${e.price_change_percent>0?"positive":"negative"}">\n                        ${e.price_change_percent>0?"+":""}${e.price_change_percent?.toFixed(2)||"0"}%\n                    </span>\n                </div>\n                <div class="watchlist-actions" onclick="event.stopPropagation()">\n                    <button class="btn btn-sm btn-outline" onclick="app.createAlertForStock('${e.ticker}')">\n                        Alert erstellen\n                    </button>\n                    <button class="btn btn-sm btn-outline" onclick="app.removeFromWatchlist('${e.ticker}')">\n                        Entfernen\n                    </button>\n                </div>\n            </div>\n        `).join(""):t.innerHTML='\n                <div class="empty-state">\n                    <div class="empty-state-icon">⭐</div>\n                    <div class="empty-state-message">Keine Aktien in der Watchlist</div>\n                    <div class="empty-state-hint">Analysieren Sie Aktien und fügen Sie sie zur Watchlist hinzu</div>\n                </div>\n            '}async exportPortfolio(){try{const e=await api.getPortfolio();window.exportManager.exportPortfolioCSV(e),this.showNotification("Portfolio erfolgreich exportiert","success")}catch(e){this.showNotification("Export fehlgeschlagen","error")}}async exportWatchlist(){try{const e=await api.getWatchlist();window.exportManager.exportWatchlistCSV(e.items),this.showNotification("Watchlist erfolgreich exportiert","success")}catch(e){this.showNotification("Export fehlgeschlagen","error")}}async loadAlerts(){if(this.currentUser)try{const[e,t]=await Promise.all([api.getAlerts(),api.getAlertStatistics()]);this.displayAlertStats(t),this.displayAllAlerts(e.alerts)}catch(e){this.showNotification("Alerts konnten nicht geladen werden","error")}else this.showNotification("Bitte melden Sie sich an","error")}displayAlertStats(e){document.getElementById("alertStats").innerHTML=`\n            <div class="stat-item">\n                <div class="stat-value">${e.total_alerts||0}</div>\n                <div class="stat-label">Gesamt</div>\n            </div>\n            <div class="stat-item">\n                <div class="stat-value">${e.active_alerts||0}</div>\n                <div class="stat-label">Aktiv</div>\n            </div>\n            <div class="stat-item">\n                <div class="stat-value">${e.triggered_alerts||0}</div>\n                <div class="stat-label">Ausgelöst</div>\n            </div>\n        `}displayAllAlerts(e){const t=document.getElementById("alertsList");0!==e.length?t.innerHTML=e.map(e=>`\n            <div class="alert-card card ${e.is_triggered?"triggered":""}">\n                <h4>${e.ticker}</h4>\n                <p>${e.alert_type.replace("_"," ")}</p>\n                <p>Target: $${e.target_value?.toFixed(2)}</p>\n                <p>Current: $${e.current_value?.toFixed(2)||"-"}</p>\n                ${e.is_triggered?'<span class="badge">Ausgelöst</span>':""}\n                <div class="alert-actions">\n                    <button class="btn-icon" onclick="app.deleteAlert(${e.id})">🗑️</button>\n                </div>\n            </div>\n        `).join(""):t.innerHTML='\n                <div class="empty-state">\n                    <div class="empty-state-icon">🔔</div>\n                    <div class="empty-state-message">Keine Alerts vorhanden</div>\n                    <div class="empty-state-hint">Erstellen Sie Alerts für Ihre Watchlist-Aktien</div>\n                </div>\n            '}showCreateAlert(){this.showModal("alertModal"),document.getElementById("alertForm").reset()}createAlertForStock(e){e?(this.showModal("alertModal"),document.getElementById("alertTicker").value=e.toUpperCase(),document.getElementById("alertCondition").value="above",document.getElementById("alertTargetPrice").value="",document.getElementById("alertNote").value=""):this.showNotification("Kein Ticker angegeben","error")}async handleCreateAlert(e){if(e.preventDefault(),!this.currentUser)return void this.showNotification("Bitte melden Sie sich an","error");const t=document.getElementById("alertTicker").value.toUpperCase(),n=document.getElementById("alertCondition").value,a=parseFloat(document.getElementById("alertTargetPrice").value),s=document.getElementById("alertNote").value;if(!t||!a||a<=0)this.showNotification("Bitte füllen Sie alle erforderlichen Felder aus","error");else try{const e={ticker:t,alert_type:"above"===n?"PRICE_ABOVE":"PRICE_BELOW",target_value:a,note:s||null};await api.createAlert(e),this.showNotification(`Alert für ${t} erstellt`,"success"),this.closeModal("alertModal"),"alerts"===this.currentPage&&await this.loadAlerts()}catch(e){this.showNotification(e.message||"Alert konnte nicht erstellt werden","error")}}async deleteAlert(e){if(confirm("Möchten Sie diesen Alert wirklich löschen?"))try{await api.deleteAlert(e),this.showNotification("Alert gelöscht","success"),await this.loadAlerts()}catch(e){this.showNotification("Alert konnte nicht gelöscht werden","error")}}async handleLogin(){const e=document.getElementById("loginEmail").value,t=document.getElementById("loginPassword").value;try{const n=await api.login(e,t);this.currentUser=n.user,this.updateUserDisplay(),this.closeModal("loginModal"),this.showNotification("Erfolgreich angemeldet","success"),this.loadDashboard()}catch(e){this.showNotification(e.message||"Anmeldung fehlgeschlagen","error")}}async handleRegister(){const e=document.getElementById("registerEmail").value,t=document.getElementById("registerUsername").value,n=document.getElementById("registerPassword").value;if(n!==document.getElementById("registerPasswordConfirm").value)return this.showNotification("Passwörter stimmen nicht überein","error"),document.getElementById("passwordMatch").textContent="❌ Passwörter stimmen nicht überein",void(document.getElementById("passwordMatch").style.color="#e74c3c");if(n.length<6)this.showNotification("Passwort muss mindestens 6 Zeichen lang sein","error");else try{const a=await api.register(e,t,n);this.currentUser=a.user,this.updateUserDisplay(),this.closeModal("registerModal"),this.showNotification("Erfolgreich registriert","success"),this.loadDashboard()}catch(e){this.showNotification(e.message||"Registrierung fehlgeschlagen","error")}}async logout(){try{await api.logout(),this.currentUser=null,this.updateUserDisplay(),this.showNotification("Erfolgreich abgemeldet","success"),this.navigateToPage("dashboard")}catch(e){console.error("Logout failed:",e)}}showLogin(){this.showModal("loginModal")}showRegister(){this.closeModal("loginModal"),this.showModal("registerModal")}showModal(e){document.getElementById("modalOverlay").style.display="block",document.getElementById(e).style.display="block"}closeModal(e){document.getElementById("modalOverlay").style.display="none",document.getElementById(e).style.display="none"}showNotification(e,t="info"){const n=document.getElementById("notificationContainer"),a=document.createElement("div");a.className=`notification ${t}`,a.textContent=e,n.appendChild(a),setTimeout(()=>{a.remove()},5e3)}async addToWatchlistFromScreener(e){if(this.currentUser)try{await api.addToWatchlist(e),this.showNotification(`${e} zur Watchlist hinzugefügt`,"success")}catch(e){this.showNotification("Fehler beim Hinzufügen zur Watchlist","error")}else this.showNotification("Bitte melden Sie sich an","error")}async addToWatchlistFromAnalysis(){if(console.log("addToWatchlistFromAnalysis called"),console.log("currentUser:",this.currentUser),console.log("currentAnalysisTicker:",this.currentAnalysisTicker),this.currentUser)if(this.currentAnalysisTicker)try{await api.addToWatchlist(this.currentAnalysisTicker),this.showNotification(`${this.currentAnalysisTicker} zur Watchlist hinzugefügt`,"success"),await this.loadWatchlistItems()}catch(e){console.error("Error adding to watchlist:",e),e.message&&e.message.includes("already exists")?this.showNotification(`${this.currentAnalysisTicker} ist bereits in der Watchlist`,"info"):this.showNotification("Fehler beim Hinzufügen zur Watchlist","error")}else this.showNotification("Keine Aktie analysiert","error");else this.showNotification("Bitte melden Sie sich an","error")}async removeFromWatchlist(e){try{await api.removeFromWatchlist(e),this.showNotification(`${e} aus Watchlist entfernt`,"success"),this.loadWatchlist()}catch(e){this.showNotification("Fehler beim Entfernen aus Watchlist","error")}}async deleteAlert(e){try{await api.deleteAlert(e),this.showNotification("Alert gelöscht","success"),this.loadAlerts()}catch(e){this.showNotification("Fehler beim Löschen des Alerts","error")}}async changePricePeriod(e){this.currentAnalysisTicker&&(this.currentPeriod=e,document.querySelectorAll(".period-btn").forEach(t=>{t.classList.remove("active"),t.dataset.period===e&&t.classList.add("active")}),await this.loadPriceChart(this.currentAnalysisTicker,e))}async loadPriceChart(e,t="1y"){try{const n=await api.getStockHistory(e,t);if(!n||!n.data||0===n.data.length)return void console.error("No price history data available");this.priceHistoryData=n;const a=n.data.map(e=>e.date),s=n.data.map(e=>parseFloat(e.close)),i=n.data.map(e=>parseInt(e.volume));let r=null,o=null;s.length>=50&&(r=this.calculateSMA(s,50)),s.length>=200&&(o=this.calculateSMA(s,200)),this.renderPriceChart(a,s,r,o),this.renderVolumeChart(a,i)}catch(e){console.error("Error loading price chart:",e),this.showNotification("Fehler beim Laden des Charts","error")}}calculateSMA(e,t){const n=[];for(let a=0;a<e.length;a++)if(a<t-1)n.push(null);else{const s=e.slice(a-t+1,a+1).reduce((e,t)=>e+t,0);n.push(s/t)}return n}renderPriceChart(e,t,n,a){const s=document.getElementById("priceChart");if(!s)return;this.priceChartInstance&&this.priceChartInstance.destroy();const i=[{label:"Preis",data:t,borderColor:"#667eea",backgroundColor:"rgba(102, 126, 234, 0.1)",fill:!0,tension:.4,borderWidth:2}];this.showSMA50&&n&&i.push({label:"SMA 50",data:n,borderColor:"#10b981",backgroundColor:"transparent",borderWidth:2,borderDash:[5,5],pointRadius:0}),this.showSMA200&&a&&i.push({label:"SMA 200",data:a,borderColor:"#ef4444",backgroundColor:"transparent",borderWidth:2,borderDash:[5,5],pointRadius:0}),this.priceChartInstance=new Chart(s,{type:"line",data:{labels:e,datasets:i},options:{responsive:!0,maintainAspectRatio:!1,interaction:{mode:"index",intersect:!1},plugins:{legend:{display:!0,position:"top",labels:{color:"#9ca3af",usePointStyle:!0}},tooltip:{backgroundColor:"rgba(17, 24, 39, 0.95)",titleColor:"#f3f4f6",bodyColor:"#d1d5db",borderColor:"#374151",borderWidth:1,padding:12,displayColors:!0,callbacks:{label:function(e){let t=e.dataset.label||"";return t&&(t+=": "),null!==e.parsed.y&&(t+="$"+e.parsed.y.toFixed(2)),t}}}},scales:{x:{ticks:{color:"#9ca3af",maxTicksLimit:10},grid:{color:"rgba(255, 255, 255, 0.05)"}},y:{ticks:{color:"#9ca3af",callback:function(e){return"$"+e.toFixed(2)}},grid:{color:"rgba(255, 255, 255, 0.05)"}}}}})}renderVolumeChart(e,t){const n=document.getElementById("volumeChart");n&&(this.volumeChartInstance&&this.volumeChartInstance.destroy(),this.volumeChartInstance=new Chart(n,{type:"bar",data:{labels:e,datasets:[{label:"Volumen",data:t,backgroundColor:"rgba(102, 126, 234, 0.6)",borderColor:"#667eea",borderWidth:1}]},options:{responsive:!0,maintainAspectRatio:!1,plugins:{legend:{display:!1},tooltip:{backgroundColor:"rgba(17, 24, 39, 0.95)",titleColor:"#f3f4f6",bodyColor:"#d1d5db",borderColor:"#374151",borderWidth:1,padding:12,callbacks:{label:function(e){return"Volumen: "+e.parsed.y.toLocaleString()}}}},scales:{x:{ticks:{color:"#9ca3af",maxTicksLimit:10},grid:{display:!1}},y:{beginAtZero:!0,ticks:{color:"#9ca3af",maxTicksLimit:5,callback:function(e){return(e/1e6).toFixed(1)+"M"}},grid:{color:"rgba(255, 255, 255, 0.05)"}}}}}))}toggleMovingAverage(e){if("sma50"===e?this.showSMA50=document.getElementById("toggleSMA50").checked:"sma200"===e&&(this.showSMA200=document.getElementById("toggleSMA200").checked),this.priceHistoryData){const e=this.priceHistoryData.data.map(e=>e.date),t=this.priceHistoryData.data.map(e=>parseFloat(e.close));this.priceHistoryData.data.map(e=>parseInt(e.volume));let n=null,a=null;t.length>=50&&(n=this.calculateSMA(t,50)),t.length>=200&&(a=this.calculateSMA(t,200)),this.renderPriceChart(e,t,n,a)}}async runComparison(){const e=document.getElementById("compareTicker1").value.trim().toUpperCase(),t=document.getElementById("compareTicker2").value.trim().toUpperCase(),n=document.getElementById("compareTicker3").value.trim().toUpperCase(),a=document.getElementById("compareTicker4").value.trim().toUpperCase(),s=document.getElementById("comparePeriod").value,i=[e,t];if(n&&i.push(n),a&&i.push(a),i.length<2)return void this.showNotification("Bitte geben Sie mindestens 2 Ticker ein","error");const r=document.getElementById("compareResults");r.style.display="block",r.classList.add("loading");try{const e=await api.compareStocks(i,s);r.classList.remove("loading"),this.displayComparisonTable(e.comparison),this.renderComparisonChart(e.price_histories)}catch(e){r.classList.remove("loading"),this.showNotification("Vergleich fehlgeschlagen: "+e.message,"error")}}displayComparisonTable(e){const t=document.getElementById("compareTable");if(!e||0===e.length)return void(t.innerHTML='<p class="text-secondary">Keine Vergleichsdaten verfügbar</p>');let n=`\n            <div class="compare-table">\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Kennzahl</th>\n                            ${e.map(e=>`<th>${e.ticker}</th>`).join("")}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td class="metric-name">Unternehmen</td>\n                            ${e.map(e=>`<td>${e.company_name||"-"}</td>`).join("")}\n                        </tr>\n                        <tr>\n                            <td class="metric-name">Aktueller Preis</td>\n                            ${e.map(e=>`<td>$${e.current_price?.toFixed(2)||"-"}</td>`).join("")}\n                        </tr>\n                        <tr>\n                            <td class="metric-name">Marktkapitalisierung</td>\n                            ${e.map(e=>`<td>${e.market_cap?"$"+(e.market_cap/1e9).toFixed(2)+"B":"-"}</td>`).join("")}\n                        </tr>\n                        <tr>\n                            <td class="metric-name">KGV (P/E)</td>\n                            ${e.map(e=>`<td>${e.pe_ratio?.toFixed(2)||"-"}</td>`).join("")}\n                        </tr>\n                        <tr>\n                            <td class="metric-name">Dividendenrendite</td>\n                            ${e.map(e=>`<td>${e.dividend_yield?(100*e.dividend_yield).toFixed(2)+"%":"-"}</td>`).join("")}\n                        </tr>\n                        <tr>\n                            <td class="metric-name">Sektor</td>\n                            ${e.map(e=>`<td>${e.sector||"-"}</td>`).join("")}\n                        </tr>\n                        <tr>\n                            <td class="metric-name">RSI</td>\n                            ${e.map(e=>`<td>${e.rsi?.toFixed(2)||"-"}</td>`).join("")}\n                        </tr>\n                        <tr>\n                            <td class="metric-name">Volatilität</td>\n                            ${e.map(e=>`<td>${e.volatility?(100*e.volatility).toFixed(2)+"%":"-"}</td>`).join("")}\n                        </tr>\n                        <tr>\n                            <td class="metric-name">1M Änderung</td>\n                            ${e.map(e=>{const t=e.price_change_1m;return null==t?"<td>-</td>":`<td class="${t>0?"positive":"negative"}">${t>0?"+":""}${t.toFixed(2)}%</td>`}).join("")}\n                        </tr>\n                        <tr>\n                            <td class="metric-name">Volumen</td>\n                            ${e.map(e=>`<td>${e.volume?e.volume.toLocaleString():"-"}</td>`).join("")}\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        `;t.innerHTML=n}renderComparisonChart(e){const t=document.getElementById("compareChart");if(!t)return void console.error("[Comparison] Canvas element not found: compareChart");const n=t.getContext("2d");if(!n)return void console.error("[Comparison] Could not get 2D context from canvas");if(this.compareChartInstance&&(this.compareChartInstance.destroy(),this.compareChartInstance=null),!e||0===e.length)return void console.warn("[Comparison] No price histories to display");console.log("[Comparison] Rendering chart with",e.length,"stocks");const a=e[0].data.map(e=>e.date),s=["#667eea","#10b981","#ef4444","#f59e0b"],i=e.map((e,t)=>({label:e.ticker,data:e.data.map(e=>e.normalized),borderColor:s[t%s.length],backgroundColor:"transparent",borderWidth:2,tension:.4,pointRadius:0,pointHoverRadius:4}));this.compareChartInstance=new Chart(n,{type:"line",data:{labels:a,datasets:i},options:{responsive:!0,maintainAspectRatio:!1,interaction:{mode:"index",intersect:!1},plugins:{legend:{display:!0,position:"top",labels:{color:"#9ca3af",usePointStyle:!0,padding:15}},tooltip:{backgroundColor:"rgba(17, 24, 39, 0.95)",titleColor:"#f3f4f6",bodyColor:"#d1d5db",borderColor:"#374151",borderWidth:1,padding:12,callbacks:{label:function(e){let t=e.dataset.label||"";return t&&(t+=": "),null!==e.parsed.y&&(t+=(e.parsed.y>=0?"+":"")+e.parsed.y.toFixed(2)+"%"),t}}}},scales:{x:{ticks:{color:"#9ca3af",maxTicksLimit:10},grid:{color:"rgba(255, 255, 255, 0.05)"}},y:{maxTicksLimit:8,ticks:{color:"#9ca3af",callback:function(e){return e.toFixed(1)+"%"}},grid:{color:"rgba(255, 255, 255, 0.05)"}}}}})}async refreshNews(){const e=document.getElementById("newsContainer");e.classList.add("loading"),e.innerHTML='<div class="loading-spinner">Loading news...</div>';try{const t=await api.getMarketNews(15);this.displayNews(t.news),e.classList.remove("loading")}catch(t){console.error("Error loading news:",t),e.classList.remove("loading"),e.innerHTML='\n                <div class="empty-state">\n                    <div class="empty-state-icon">📰</div>\n                    <div class="empty-state-message">Keine News verfügbar</div>\n                    <div class="empty-state-hint">Fehler beim Laden der Nachrichten</div>\n                </div>\n            '}}async loadStockNews(e){try{return await api.getStockNews(e,10,7)}catch(t){return console.error(`Error loading news for ${e}:`,t),null}}displayNews(e){const t=document.getElementById("newsContainer");e&&0!==e.length?t.innerHTML=e.map(e=>{const t=e.date?new Date(e.date).toLocaleString("de-DE",{day:"2-digit",month:"2-digit",year:"numeric",hour:"2-digit",minute:"2-digit"}):"Unbekannt",n=this.getSentimentClass(e.sentiment),a=this.getSentimentIcon(e.sentiment);return`\n                <div class="news-card" onclick="window.open('${e.url}', '_blank')">\n                    ${e.image?`\n                        <div class="news-thumbnail">\n                            <img src="${e.image}" alt="News thumbnail" onerror="this.parentElement.style.display='none'">\n                        </div>\n                    `:""}\n                    <div class="news-content">\n                        <div class="news-header">\n                            <span class="news-source">${e.source}</span>\n                            ${e.sentiment?`<span class="sentiment-badge ${n}">${a} ${e.sentiment}</span>`:""}\n                        </div>\n                        <h4 class="news-headline">${e.headline}</h4>\n                        ${e.summary?`<p class="news-summary">${e.summary}</p>`:""}\n                        <div class="news-footer">\n                            <span class="news-date">${t}</span>\n                        </div>\n                    </div>\n                </div>\n            `}).join(""):t.innerHTML='\n                <div class="empty-state">\n                    <div class="empty-state-icon">📰</div>\n                    <div class="empty-state-message">Keine News verfügbar</div>\n                </div>\n            '}getSentimentClass(e){switch(e){case"bullish":return"sentiment-bullish";case"bearish":return"sentiment-bearish";default:return"sentiment-neutral"}}getSentimentIcon(e){switch(e){case"bullish":return"🟢";case"bearish":return"🔴";default:return"⚪"}}showAddTransaction(){const e=(new Date).toISOString().split("T")[0];document.getElementById("transactionDate").value=e,document.getElementById("transactionForm").reset(),this.showModal("transactionModal")}async handleAddTransaction(e){const t=document.getElementById("transactionTicker").value.toUpperCase(),n=document.getElementById("transactionType").value,a=parseFloat(document.getElementById("transactionShares").value),s=parseFloat(document.getElementById("transactionPrice").value),i=parseFloat(document.getElementById("transactionFees").value)||0,r=document.getElementById("transactionDate").value;try{await api.addTransaction({ticker:t,transaction_type:n,shares:a,price:s,fees:i,transaction_date:r}),this.showNotification(`Transaktion für ${t} erfolgreich hinzugefügt`,"success"),this.closeModal("transactionModal"),"portfolio"===this.currentPage?await this.loadPortfolio():"dashboard"===this.currentPage&&await this.refreshPortfolio(),setTimeout(async()=>{"portfolio"===this.currentPage&&await this.loadPortfolio()},500)}catch(e){console.error("Error adding transaction:",e),this.showNotification(e.message||"Fehler beim Hinzufügen der Transaktion","error")}}showAddToWatchlist(){document.getElementById("watchlistForm").reset(),this.showModal("watchlistModal")}async handleAddToWatchlist(e){const t=document.getElementById("watchlistTicker").value.toUpperCase(),n=document.getElementById("watchlistNotes").value,a=document.getElementById("watchlistTags").value,s=a?a.split(",").map(e=>e.trim()).filter(e=>e):[];try{await api.addToWatchlist(t,n,s),this.showNotification(`${t} zur Watchlist hinzugefügt`,"success"),this.closeModal("watchlistModal"),"watchlist"===this.currentPage&&await this.loadWatchlistItems()}catch(e){console.error("Error adding to watchlist:",e),this.showNotification(e.message||"Fehler beim Hinzufügen zur Watchlist","error")}}async initTechnicalCharts(e){if(console.log("[TechnicalCharts] Initializing charts for",this.currentAnalysisTicker),!this.technicalChartsManager)return void console.error("[TechnicalCharts] TechnicalChartsManager not initialized");const t=document.getElementById("technicalChartsContainer");if(t)try{const t=await this.prepareTechnicalChartData(e);this.technicalChartsManager.createTechnicalDashboard("technicalChartsContainer",t),this.updateTechnicalInfoCards(e.technical_indicators),console.log("[TechnicalCharts] Charts initialized successfully")}catch(e){console.error("[TechnicalCharts] Error initializing charts:",e),t.innerHTML='\n                <div class="error-state">\n                    <p>❌ Fehler beim Laden der technischen Charts</p>\n                    <button class="btn btn-secondary" onclick="app.switchAnalysisTab(\'technical\')">Erneut versuchen</button>\n                </div>\n            '}else console.error("[TechnicalCharts] Container not found")}async prepareTechnicalChartData(e){const t=(await api.getStockHistory(this.currentAnalysisTicker,this.currentPeriod)).data||[],n=t.map(e=>e.date),a=t.map(e=>e.close),s=t.map(e=>e.volume),i=(t.map(e=>e.open),t.map(e=>e.high),t.map(e=>e.low),this.calculateBollingerBands(a,20,2)),r=this.calculateMACD(a),o=this.calculateRSI(a,14),c=this.calculateSMA(s,20),l=a.map((e,t)=>t>0?e-a[t-1]:0);return{ticker:this.currentAnalysisTicker,dates:n,prices:a,volumes:s,bollinger:i,macd:r,rsi:o,volumeMA:c,priceChanges:l}}calculateBollingerBands(e,t=20,n=2){const a=this.calculateSMA(e,t),s=[],i=[];for(let r=0;r<e.length;r++)if(r<t-1)s.push(null),i.push(null);else{const o=e.slice(r-t+1,r+1),c=a[r],l=o.reduce((e,t)=>e+Math.pow(t-c,2),0)/t,d=Math.sqrt(l);s.push(c+d*n),i.push(c-d*n)}return{upper:s,middle:a,lower:i}}calculateMACD(e,t=12,n=26,a=9){const s=this.calculateEMA(e,t),i=this.calculateEMA(e,n),r=s.map((e,t)=>e-i[t]),o=this.calculateEMA(r,a),c=r.map((e,t)=>e-o[t]);return{macd:r,signal:o,histogram:c}}calculateRSI(e,t=14){const n=[];for(let t=1;t<e.length;t++)n.push(e[t]-e[t-1]);const a=[50];let s=0,i=0;for(let e=0;e<t;e++)n[e]>0?s+=n[e]:i+=Math.abs(n[e]);s/=t,i/=t;for(let e=t;e<n.length;e++){const r=n[e];s=(s*(t-1)+(r>0?r:0))/t,i=(i*(t-1)+(r<0?Math.abs(r):0))/t;const o=100-100/(1+s/i);a.push(o)}return a}updateTechnicalInfoCards(e){if(!e)return;const t=e.rsi||0;document.getElementById("tech-rsi-value").textContent=t.toFixed(2);const n=document.getElementById("tech-rsi-status");n.innerHTML=t>70?'<span class="indicator-badge bearish">Überkauft</span>':t<30?'<span class="indicator-badge bullish">Überverkauft</span>':'<span class="indicator-badge neutral">Neutral</span>';const a=e.macd||0,s=e.macd_signal||"";document.getElementById("tech-macd-value").textContent=a.toFixed(4),document.getElementById("tech-macd-status").innerHTML=`<span class="indicator-badge ${"bullish"===s?"bullish":"bearish"===s?"bearish":"neutral"}">${s||"Neutral"}</span>`;const i=e.bollinger_position||50;document.getElementById("tech-bb-value").textContent=i.toFixed(1)+"%";const r=document.getElementById("tech-bb-status");r.innerHTML=i>80?'<span class="indicator-badge bearish">Nahe oberer Band</span>':i<20?'<span class="indicator-badge bullish">Nahe unterer Band</span>':'<span class="indicator-badge neutral">Mittlerer Bereich</span>';const o=e.volatility||0;document.getElementById("tech-volatility-value").textContent=(100*o).toFixed(2)+"%",document.getElementById("tech-volatility-status").innerHTML=o>.3?'<span class="indicator-badge bearish">Hoch</span>':o>.15?'<span class="indicator-badge neutral">Mittel</span>':'<span class="indicator-badge bullish">Niedrig</span>'}initDashboardCharts(e){if(console.log("[DashboardCharts] Initializing charts for portfolio:",e),this.dashboardChartsManager)try{const t=document.getElementById("portfolioChartsGrid");if(!t)return void console.error("[DashboardCharts] Charts grid container not found");t.style.display="grid";const n=e.items.sort((e,t)=>(t.current_value||0)-(e.current_value||0)).slice(0,8).map(t=>({ticker:t.ticker,value:t.current_value||0,percentage:(t.current_value||0)/(e.summary.total_value||1)*100}));this.dashboardChartsManager.createPortfolioDistribution("portfolioDistributionChart",n);const a=this.generatePortfolioPerformanceData(e.summary.total_value||0,e.summary.total_gain_loss_percent||0);this.dashboardChartsManager.createPortfolioPerformance("portfolioPerformanceChart",a),console.log("[DashboardCharts] Charts initialized successfully")}catch(e){console.error("[DashboardCharts] Error initializing charts:",e)}else console.warn("[DashboardCharts] DashboardChartsManager not initialized")}generatePortfolioPerformanceData(e,t){const n=[],a=e/(1+t/100);for(let t=0;t<30;t++){const s=new Date;s.setDate(s.getDate()-(30-t-1));const i=a+t/29*(e-a)+(Math.random()-.5)*(.02*e);n.push({date:s.toLocaleDateString("de-DE",{month:"short",day:"numeric"}),value:Math.max(i,0),change:t>0?i-n[t-1].value:0})}return n}}document.addEventListener("DOMContentLoaded",()=>{window.app=new StockAnalyzerApp})})();